---
// pages/en/[id].astro
import Layout from '../../../layouts/Layout.astro';
import LightboxModal from '../../../components/LightboxModal.astro';

// IMPORTAR I18N
import { getLanguageFromUrl, t, setCurrentLanguage, getStudioData } from '../../../i18n/utils/translator';

// Definir rutas estáticas para los estudios
export function getStaticPaths() {
  const studios = ['jade', 'zian', 'indigo'];
  const paths: Array<{ params: { id: string } }> = [];
  
  // ✅ SOLO generar rutas para INGLÉS
  studios.forEach(id => {
    paths.push({ params: { id } });
  });
  
  return paths;
}

const { id } = Astro.params;
const studioId = id;
const currentLang = 'en';  
setCurrentLanguage('en');

// ✅ URL base con prefijo /en para inglés
const baseUrl = '/en';


// Validar que el estudio existe
const validStudios = ['jade', 'zian', 'indigo'];
if (!studioId || !validStudios.includes(studioId)) {
  return Astro.redirect('/404');
}

// Obtener datos del estudio desde traducciones
const estudio = getStudioData(studioId, currentLang);
if (!estudio) {
  return Astro.redirect('/404');
}

// Configurar URLs base según idioma

// Clases de color por estudio
const colorClasses: Record<string, {
  bg: string; text: string; border: string;
  hover: string; light: string; lightText: string;
}> = {
  jade: {
    bg: 'bg-green-500', text: 'text-green-500', border: 'border-green-500',
    hover: 'hover:bg-green-600', light: 'bg-green-100', lightText: 'text-green-700'
  },
  zian: {
    bg: 'bg-blue-500', text: 'text-blue-500', border: 'border-blue-500',
    hover: 'hover:bg-blue-600', light: 'bg-blue-100', lightText: 'text-blue-700'
  },
  indigo: {
    bg: 'bg-indigo-500', text: 'text-indigo-500', border: 'border-indigo-500',
    hover: 'hover:bg-indigo-600', light: 'bg-indigo-100', lightText: 'text-indigo-700'
  }
};

const colors = colorClasses[studioId];

// Preparar datos para lightbox
const lightboxData = {
  [studioId]: {
    nombre: estudio.nombre,
    imagenPrincipal: estudio.imagen,
    imagenes: estudio.galeria,
    color: colors.bg
  }
};

// Mensajes de WhatsApp traducidos
const whatsappMessage = t('estudio_detalle.acciones.whatsapp_mensaje').replace('{{estudio}}', estudio.nombre);
---

<Layout title={`${estudio.nombre} - Pixel Living | Coliving en Bogotá`}>
  <main>
    <section class="pt-32 pb-16">
      <div class="container">
        <!-- Breadcrumbs traducidos -->
        <div class="flex items-center mb-6 text-sm">
          <a href={baseUrl || '/'} class="text-gray-500 hover:text-gray-700">{t('estudio_detalle.breadcrumbs.inicio')}</a>
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mx-2 text-gray-400">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
          <a href="/en#studios" class="text-gray-500 hover:text-gray-700">{t('estudio_detalle.breadcrumbs.espacios')}</a>
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 mx-2 text-gray-400">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
          <span class={`font-medium ${colors.text}`}>{estudio.nombre}</span>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
          <!-- Galería de imágenes -->
          <div>
            <div class="relative overflow-hidden rounded-xl border-2 border-gray-200 mb-4 aspect-video">
              <img 
                id="mainImage"
                src={estudio.imagen} 
                alt={estudio.nombre} 
                class="w-full h-full object-cover cursor-pointer main-image"
                data-estudio-id={studioId}
              />
              <div class={`absolute top-4 right-4 ${colors.bg} py-1 px-3 rounded-md shadow-md text-white font-medium`}>
                {estudio.metros}
              </div>
            </div>
            
            <!-- Miniaturas -->
            <div class="grid grid-cols-5 gap-2">
              <div class={`cursor-pointer rounded-md overflow-hidden border-2 ${colors.border} thumbnail-container gallery-thumb`} data-index={-1} data-estudio-id={studioId}>
                <img 
                  src={estudio.imagen} 
                  alt={`${estudio.nombre} - ${t('estudio_detalle.galeria.imagen_principal')}`} 
                  class="w-full h-20 object-cover thumbnail"
                  data-img-src={estudio.imagen}
                  data-index={-1}
                />
              </div>
              
              {(estudio.galeria || []).slice(0, 4).map((img: string, imgIndex: number) => (
                <div class="cursor-pointer rounded-md overflow-hidden border-2 border-gray-200 thumbnail-container gallery-thumb" data-index={imgIndex} data-estudio-id={studioId}>
                  <img 
                    src={img} 
                    alt={`${estudio.nombre} - Imagen ${imgIndex + 1}`} 
                    class="w-full h-20 object-cover thumbnail"
                    data-img-src={img}
                    data-index={imgIndex}
                  />
                </div>
              ))}
            </div>
            
            <button 
              class="w-full mt-4 py-2 bg-gray-800 text-white rounded-md flex items-center justify-center group open-gallery-btn"
              id="openGalleryBtn"
              data-estudio-id={studioId}
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 mr-2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
              </svg>
              {t('estudio_detalle.galeria.ver_todas')}
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 ml-1 transform transition-transform group-hover:translate-x-1">
                <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
              </svg>
            </button>
          </div>
          
          <!-- Información del estudio -->
          <div>
            <h1 class="text-4xl font-bold mb-2 cal-sans">
              <span class={colors.text}>{estudio.nombre}</span>
            </h1>
            <p class="text-2xl mb-6 font-light">{estudio.precio}</p>
            
            <div class="mb-8">
              <h2 class="text-xl font-semibold mb-3">{t('estudio_detalle.info.descripcion_titulo')}</h2>
              <p class="text-gray-700 leading-relaxed">{estudio.descripcion}</p>
            </div>
            
            <div class="mb-8">
              <h2 class="text-xl font-semibold mb-3">{t('estudio_detalle.info.caracteristicas_titulo')}</h2>
              <ul class="grid grid-cols-1 md:grid-cols-2 gap-3">
                {estudio.caracteristicas.map((item: string) => (
                  <li class="flex items-start">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class={`w-5 h-5 ${colors.text} mr-2 flex-shrink-0 mt-0.5`}>
                      <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <div class="mb-8">
              <h2 class="text-xl font-semibold mb-3">{t('estudio_detalle.info.incluye_titulo')}</h2>
              <ul class="grid grid-cols-1 gap-3">
                {estudio.incluye.map((item: string) => (
                  <li class="flex items-start">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class={`w-5 h-5 ${colors.text} mr-2 flex-shrink-0 mt-0.5`}>
                      <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                    </svg>
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
            </div>
        
            <div class="bg-gray-100 p-6 rounded-lg">
              <h2 class="text-xl font-semibold mb-4">{t('estudio_detalle.info.interes_titulo')}</h2>
              <div class="flex flex-col sm:flex-row gap-4">
                <a 
                  href="#reserva-section" 
                  class={`flex-1 py-3 px-6 ${colors.bg} ${colors.hover} text-white rounded-md flex items-center justify-center`}
                >
                  {t('estudio_detalle.acciones.reservar')}
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 ml-2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
                  </svg>
                </a>
                
                <a 
                  href={`https://wa.me/573195895858?text=${encodeURIComponent(whatsappMessage)}`}
                  target="_blank" 
                  class="flex-1 py-3 px-6 bg-green-500 hover:bg-green-600 text-white rounded-md flex items-center justify-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-5 h-5 mr-2" viewBox="0 0 16 16">
                    <path d="M13.601 2.326A7.854 7.854 0 0 0 7.994 0C3.627 0 .068 3.558.064 7.926c0 1.399.366 2.76 1.057 3.965L0 16l4.204-1.102a7.933 7.933 0 0 0 3.79.965h.004c4.368 0 7.926-3.558 7.93-7.93A7.898 7.898 0 0 0 13.6 2.326zM7.994 14.521a6.573 6.573 0 0 1-3.356-.92l-.24-.144-2.494.654.666-2.433-.156-.251a6.56 6.56 0 0 1-1.007-3.505c0-3.626 2.957-6.584 6.591-6.584a6.56 6.56 0 0 1 4.66 1.931 6.557 6.557 0 0 1 1.928 4.66c-.004 3.639-2.961 6.592-6.592 6.592zm3.615-4.934c-.197-.099-1.17-.578-1.353-.646-.182-.065-.315-.099-.445.099-.133.197-.513.646-.627.775-.114.133-.232.148-.43.05-.197-.1-.836-.308-1.592-.985-.59-.525-.985-1.175-1.103-1.372-.114-.198-.011-.304.088-.403.087-.088.197-.232.296-.346.1-.114.133-.198.198-.33.065-.134.034-.248-.015-.347-.05-.099-.445-1.076-.612-1.47-.16-.389-.323-.335-.445-.34-.114-.007-.247-.007-.38-.007a.729.729 0 0 0-.529.247c-.182.198-.691.677-.691 1.654 0 .977.71 1.916.81 2.049.098.133 1.394 2.132 3.383 2.992.47.205.84.326 1.129.418.475.152.904.129 1.246.08.38-.058 1.171-.48 1.338-.943.164-.464.164-.86.114-.943-.049-.084-.182-.133-.38-.232z"/>
                  </svg>
                  {t('estudio_detalle.acciones.whatsapp')}
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Sección de reserva con formulario traducido -->
    <section id="reserva-section" class={`${colors.light} py-16`}>
      <div class="container">
        <h2 class={`text-3xl font-bold mb-8 text-center ${colors.lightText}`}>
          {t('estudio_detalle.formulario.titulo').replace('{{estudio}}', estudio.nombre)}
        </h2>
        
        <div class="max-w-3xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
          <div id="message-container" class="hidden"></div>
          
          <form id="estudioReservaForm" class="p-8">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">
                  {t('estudio_detalle.formulario.nombre')} *
                </label>
                <input 
                  type="text" 
                  id="nombre" 
                  name="nombre" 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                  placeholder={t('estudio_detalle.formulario.nombre_placeholder')}
                  autocomplete="name"
                  required
                >
                <div id="nombre-error" class="hidden text-red-600 text-sm mt-1"></div>
              </div>
              
              <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
                  {t('estudio_detalle.formulario.email')} *
                </label>
                <input 
                  type="email" 
                  id="email" 
                  name="email" 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                  placeholder={t('estudio_detalle.formulario.email_placeholder')}
                  autocomplete="email"
                  required
                >
                <div id="email-error" class="hidden text-red-600 text-sm mt-1"></div>
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label for="telefono" class="block text-sm font-medium text-gray-700 mb-1">
                  {t('estudio_detalle.formulario.telefono')} *
                </label>
                <input 
                  type="tel" 
                  id="telefono" 
                  name="telefono" 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                  placeholder={t('estudio_detalle.formulario.telefono_placeholder')}
                  autocomplete="tel"
                  required
                >
                <div id="telefono-error" class="hidden text-red-600 text-sm mt-1"></div>
              </div>
              
              <div>
                <label for="fecha" class="block text-sm font-medium text-gray-700 mb-1">
                  {t('estudio_detalle.formulario.fecha')}
                </label>
                <input 
                  type="date" 
                  id="fecha" 
                  name="fecha" 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                  required
                >
                <div id="fecha-error" class="hidden text-red-600 text-sm mt-1"></div>
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label for="estadia" class="block text-sm font-medium text-gray-700 mb-1">
                  {t('estudio_detalle.formulario.estadia')}
                </label>
                <select 
                  id="estadia" 
                  name="estadia" 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                  required
                >
                  <option value="">{t('estudio_detalle.formulario.estadia_opciones.seleccionar')}</option>
                  <option value="1-3 meses">{t('estudio_detalle.formulario.estadia_opciones.1_3_meses')}</option>
                  <option value="3-6 meses">{t('estudio_detalle.formulario.estadia_opciones.3_6_meses')}</option>
                  <option value="6-12 meses">{t('estudio_detalle.formulario.estadia_opciones.6_12_meses')}</option>
                  <option value="Más de 1 año">{t('estudio_detalle.formulario.estadia_opciones.mas_1_ano')}</option>
                </select>
                <div id="estadia-error" class="hidden text-red-600 text-sm mt-1"></div>
              </div>
              
              <div>
                <label for="personas" class="block text-sm font-medium text-gray-700 mb-1">
                  {t('estudio_detalle.formulario.personas')}
                </label>
                <select 
                  id="personas" 
                  name="personas" 
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                  required
                >
                  <option value="1">{t('estudio_detalle.formulario.personas_opciones.1_persona')}</option>
                  <option value="2">{t('estudio_detalle.formulario.personas_opciones.2_personas')}</option>
                </select>
                <div id="personas-error" class="hidden text-red-600 text-sm mt-1"></div>
              </div>
            </div>
            
            <div class="mb-6">
              <label for="expectativas" class="block text-sm font-medium text-gray-700 mb-1">
                {t('estudio_detalle.formulario.expectativas')} *
              </label>
              <textarea 
                id="expectativas" 
                name="expectativas" 
                rows="3" 
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                placeholder={t('estudio_detalle.formulario.expectativas_placeholder').replace('{{estudio}}', estudio.nombre)}
                required
              ></textarea>
              <div id="contador-caracteres" class="mt-1 text-xs text-gray-500">0/500 {t('estudio_detalle.formulario.contador_caracteres')}</div>
              <div id="expectativas-error" class="hidden text-red-600 text-sm mt-1"></div>
            </div>
            
            <!-- Honeypot anti-spam -->
            <div style="position: absolute; left: -9999px; visibility: hidden;" aria-hidden="true">
              <input type="text" name="website_url" id="website_url_estudio" value="" 
                    tabindex="-1" autocomplete="nope" />
            </div>
            
            <button 
              type="submit" 
              class={`w-full btn ${colors.bg} ${colors.hover} text-white py-3 rounded-md font-medium transition-all duration-300`}
            >
              {t('estudio_detalle.formulario.submit').replace('{{estudio}}', estudio.nombre)}
            </button>
            
            <p class="text-center text-sm text-gray-500 mt-4">
              {t('estudio_detalle.formulario.footer_note')}
            </p>
          </form>
        </div>
      </div>
    </section>

    <!-- Otros estudios -->
    <section class="py-16">
      <div class="container">
        <h2 class="text-3xl font-bold mb-8 text-center">{t('estudio_detalle.otros_estudios.titulo')}</h2>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 px-0 lg:px-40 gap-6">
          {validStudios
            .filter(e => e !== studioId)
            .slice(0, 3)
            .filter((estudioId: string) => {
              const otroEstudio = getStudioData(estudioId, currentLang);
              return otroEstudio && otroEstudio.imagen;
            })
            .map((estudioId: string) => {
              const otroEstudio = getStudioData(estudioId, currentLang)!;
              const otroColors = colorClasses[estudioId] as typeof colors;
              return (
                <div class="bg-white rounded-md overflow-hidden shadow-lg border-2 border-gray-200 transform transition duration-300 hover:-translate-y-2 hover:shadow-xl">
                  <div class="relative">
                    <img src={otroEstudio.imagen} alt={otroEstudio.nombre} class="w-full h-48 object-cover" />
                    <div class={`absolute top-4 right-4 bg-white py-1 px-3 rounded-md shadow-md border ${otroColors.border}`}>
                      <span class="font-medium text-sm">{otroEstudio.metros}</span>
                    </div>
                  </div>
                  
                  <div class="p-4">
                    <h3 class={`text-xl font-bold mb-2 ${otroColors.text}`}>{otroEstudio.nombre}</h3>
                    <p class="text-gray-600 mb-3 line-clamp-2">{otroEstudio.descripcion}</p>
                    
                    <div class="flex justify-between items-center">
                      <span class={`text-lg font-bold ${otroColors.text}`}>{otroEstudio.precio}</span>
                      <a href={`/en/${estudioId}`} class={`${otroColors.text} font-medium inline-flex items-center group`}>
                        {t('estudio_detalle.otros_estudios.ver_detalles')}
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 ml-1 transform transition-transform group-hover:translate-x-1">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3" />
                        </svg>
                      </a>
                    </div>
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </section>
  </main>

  <!-- Lightbox modal -->
  <LightboxModal id="estudio-lightbox" showDetailsButton={false} showReservaButton={true} reservaPath="#reserva-section" />
</Layout>

<!-- Script actualizado con traducciones -->
<script define:vars={{ 
  lightboxData, 
  studioId, 
  estudioNombre: estudio.nombre, 
  currentLang,
  mensajes: {
    exito: t('estudio_detalle.mensajes.exito'),
    error: t('estudio_detalle.mensajes.error'),
    procesando: t('estudio_detalle.mensajes.procesando'),
    enviando: t('estudio_detalle.mensajes.enviando'),
    corregirErrores: t('estudio_detalle.mensajes.corregir_errores'),
    whatsappConfirmacion: t('estudio_detalle.mensajes.whatsapp_confirmacion'),
    whatsappAlternativa: t('estudio_detalle.mensajes.whatsapp_alternativa')
  }
}}>
function getReserveButtonText(lang) {
    return lang === 'en' ? 'Reserve now' : 'Reservar ahora';
}

window.lightboxData = lightboxData || {};

document.addEventListener('DOMContentLoaded', () => {
    console.log('🚀 Initializing studio page (EN):', estudioNombre);
    
    // Anti-spam configuration
    const TIEMPO_INICIO = Date.now();
    const TIEMPO_MINIMO_ENVIO = 3000;
    let formularioEnviado = false;
    
    // ===== CRITICAL FIX FOR LIGHTBOX RESERVE BUTTON =====
    function repairLightboxReserveButton() {
        const modal = document.getElementById('estudio-lightbox');
        if (!modal) {
            console.log('⚠️ Lightbox modal not found');
            return;
        }
        
        function applyButtonFix() {
            const selectors = [
                'a[href="#reserva-section"]',
                'a[href="#reservas"]', 
                'a[href="#reservation"]',
                'a[href="#reserve"]',
                '.lightbox-reserva-link',
                '#lightboxReservaLink',
                'button.lightbox-reserva-link'
            ];
            
            let foundButton = null;
            
            for (const selector of selectors) {
                const button = modal.querySelector(selector);
                if (button) {
                    foundButton = button;
                    console.log('✅ Reserve button found:', selector);
                    break;
                }
            }
            
            if (!foundButton) {
                console.log('❌ Reserve button not found');
                return;
            }


    const textoBoton = getReserveButtonText(currentLang || 'en');
    const svgElement = foundButton.querySelector('svg');
    
    if (svgElement) {
        // Si tiene SVG, preservarlo y solo cambiar el texto
        foundButton.innerHTML = `${textoBoton} ${svgElement.outerHTML}`;
    } else {
        // Si no tiene SVG, solo cambiar el texto
        foundButton.textContent = textoBoton;
    }
    
    // Remove all existing event listeners by cloning the element
    const newButton = foundButton.cloneNode(true);
    foundButton.parentNode?.replaceChild(newButton, foundButton);
    
    // Add the correct event listener
    newButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        console.log(`🎯 Lightbox "${textoBoton}" clicked!`);
        
        // Close the lightbox
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = '';
        
        // Dispatch custom event for form communication
        setTimeout(() => {
            const event = new CustomEvent('estudioSeleccionado', {
                detail: {
                    estudioId: studioId,
                    estudioNombre: estudioNombre
                },
                bubbles: true,
                cancelable: true
            });
            document.dispatchEvent(event);
            console.log('📤 Studio selected event dispatched');
        }, 100);
        
        // Smooth scroll to reservation section
        setTimeout(() => {
            const reservationSection = document.querySelector('#reserva-section') || 
                                    document.querySelector('#reservas') ||
                                    document.querySelector('#reservation') ||
                                    document.querySelector('#reserve') ||
                                    document.querySelector('section[id*="reserva"]') ||
                                    document.querySelector('[data-estudio-form]');
            
            if (reservationSection) {
                reservationSection.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                console.log('⬇️ Scroll to reservation completed');
            } else {
                console.log('⚠️ Reservation section not found');
            }
        }, 300);
    });
    
    console.log(`✅ Reserve button fix applied: "${textoBoton}"`);
}
        
        // Apply fix immediately
        applyButtonFix();
        
        // Also apply fix when lightbox opens (in case content is regenerated)
        const observer = new MutationObserver(() => {
            if (!modal.classList.contains('hidden')) {
                applyButtonFix();
            }
        });
        
        observer.observe(modal, {
            attributes: true,
            attributeFilter: ['class', 'style']
        });
    }
    
    // ===== APPLY FIX ON PAGE LOAD =====
    repairLightboxReserveButton();
    
    // ===== ALSO APPLY FIX AFTER DELAY (in case lightbox loads late) =====
    setTimeout(() => {
        repairLightboxReserveButton();
    }, 1000);
    
    // ===== YOUR EXISTING FORM CODE HERE =====
    // (Keep all your anti-spam validation and form code)
    
    // Anti-spam validations
    function validateAntiSpam(data) {
        // Validate honeypot
        const honeypotField = document.getElementById('website_url_estudio');
        const honeypotValue = honeypotField ? honeypotField.value.trim() : '';
        if (honeypotValue !== '') {
            console.log('🚫 Spam detected - honeypot filled');
            return false;
        }
        
        // Validate timing
        const timeElapsed = Date.now() - TIEMPO_INICIO;
        if (timeElapsed < TIEMPO_MINIMO_ENVIO) {
            console.log('🚫 Spam detected - submission too fast');
            return false;
        }
        
        // Validate patterns
        const fullText = `${data.nombre} ${data.email} ${data.expectativas}`.toLowerCase();
        const spamPatterns = [
            /\b(viagra|cialis|casino|loan|credit|bitcoin|crypto)\b/i,
            /\b(click here|visit now|buy now|limited time)\b/i,
            /https?:\/\//i
        ];
        
        if (spamPatterns.some(pattern => pattern.test(fullText))) {
            console.log('🚫 Spam detected - suspicious patterns');
            return false;
        }
        
        return true;
    }
    
    // Inicializar lightbox responsivo
    class ResponsiveLightbox {
        constructor(modalId, lightboxData) {
            this.modalId = modalId;
            this.lightboxData = lightboxData || {};
            this.currentEstudioId = '';
            this.currentImageIndex = 0;
            this.currentImages = [];
            
            this.initializeElements();
            this.bindEvents();
        }
        
        initializeElements() {
            this.modal = document.getElementById(this.modalId);
            if (!this.modal) return;
            
            this.image = this.modal.querySelector('.lightbox-image');
            this.title = this.modal.querySelector('.lightbox-title');
            this.closeBtn = this.modal.querySelector('.lightbox-close');
            this.prevBtn = this.modal.querySelector('.lightbox-prev');
            this.nextBtn = this.modal.querySelector('.lightbox-next');
            this.currentSpan = this.modal.querySelector('.lightbox-current');
            this.totalSpan = this.modal.querySelector('.lightbox-total');
        }
        
        bindEvents() {
            if (!this.modal) return;
            
            this.closeBtn?.addEventListener('click', () => this.close());
            this.prevBtn?.addEventListener('click', () => this.navigateImage(-1));
            this.nextBtn?.addEventListener('click', () => this.navigateImage(1));
            
            this.modal.addEventListener('click', (e) => {
                if (e.target === this.modal) this.close();
            });
            
            document.addEventListener('keydown', (e) => this.handleKeyboard(e));
        }
        
        open(estudioId, imageIndex = 0) {
            const estudioData = this.lightboxData[estudioId];
            if (!estudioData) return;
            
            this.currentEstudioId = estudioId;
            this.currentImages = this.buildImageArray(estudioData);
            this.currentImageIndex = Math.max(0, Math.min(imageIndex, this.currentImages.length - 1));
            
            if (this.title) this.title.textContent = estudioData.nombre;
            
            this.updateImage();
            this.show();
        }
        
        close() {
            this.modal?.classList.add('hidden');
            this.modal?.classList.remove('flex');
            document.body.style.overflow = '';
        }
        
        show() {
            this.modal?.classList.remove('hidden');
            this.modal?.classList.add('flex');
            document.body.style.overflow = 'hidden';
        }
        
        navigateImage(direction) {
            if (this.currentImages.length === 0) return;
            
            this.currentImageIndex = (this.currentImageIndex + direction + this.currentImages.length) % this.currentImages.length;
            this.updateImage();
        }
        
        buildImageArray(estudioData) {
            const images = [];
            
            if (estudioData.imagenPrincipal) {
                images.push({
                    src: estudioData.imagenPrincipal,
                    alt: `${estudioData.nombre} - Imagen principal`
                });
            }
            
            if (estudioData.imagenes && Array.isArray(estudioData.imagenes)) {
                estudioData.imagenes.forEach((src, index) => {
                    images.push({
                        src: src,
                        alt: `${estudioData.nombre} - Imagen ${index + 1}`
                    });
                });
            }
            
            return images;
        }
        
        updateImage() {
            if (!this.image || this.currentImages.length === 0) return;
            
            const currentImage = this.currentImages[this.currentImageIndex];
            
            this.image.style.opacity = '0.7';
            setTimeout(() => {
                this.image.src = currentImage.src;
                this.image.alt = currentImage.alt;
                this.image.style.opacity = '1';
            }, 150);
            
            if (this.currentSpan) this.currentSpan.textContent = (this.currentImageIndex + 1).toString();
            if (this.totalSpan) this.totalSpan.textContent = this.currentImages.length.toString();
        }
        
        handleKeyboard(e) {
            if (this.modal?.classList.contains('hidden')) return;
            
            switch (e.key) {
                case 'Escape':
                    this.close();
                    break;
                case 'ArrowLeft':
                    this.navigateImage(-1);
                    break;
                case 'ArrowRight':
                    this.navigateImage(1);
                    break;
            }
        }
    }
    
    // Inicializar lightbox
    const lightboxInstance = new ResponsiveLightbox('estudio-lightbox', window.lightboxData);
    
    window.openLightbox = function(estudioId, imageIndex = 0) {
        lightboxInstance.open(estudioId, imageIndex);
    };
    
    // Configurar galería principal
    const mainImage = document.getElementById('mainImage');
    const thumbnailContainers = document.querySelectorAll('.thumbnail-container');
    const openGalleryBtn = document.getElementById('openGalleryBtn');

    thumbnailContainers.forEach(container => {
        container.addEventListener('click', () => {
            const thumbImg = container.querySelector('.thumbnail');
            if (mainImage && thumbImg) {
                const imgSrc = thumbImg.getAttribute('data-img-src');
                if (imgSrc) {
                    mainImage.src = imgSrc;
                }
            }
        });
    });

    // Eventos para abrir lightbox
    if (openGalleryBtn) {
        openGalleryBtn.addEventListener('click', () => {
            window.openLightbox(studioId, 0);
        });
    }

    if (mainImage) {
        mainImage.addEventListener('click', () => {
            window.openLightbox(studioId, 0);
        });
    }
    
    // Configurar formulario
    const form = document.getElementById('estudioReservaForm');
    const messageContainer = document.getElementById('message-container');
    const campos = form.querySelectorAll('input[required], select[required], textarea[required]');
    
    if (!form || !messageContainer) return;
    
    // Funciones de validación
    function validarCampo(campo) {
        let error = null;
        
        switch(campo.id) {
            case 'nombre':
                const nombre = campo.value.trim();
                if (nombre.length < 2) error = 'El nombre debe tener al menos 2 caracteres';
                else if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/.test(nombre)) error = 'Solo se permiten letras y espacios';
                break;
            case 'email':
                if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(campo.value.trim())) error = 'Ingresa un email válido';
                break;
            case 'telefono':
                const telefono = campo.value.trim().replace(/\s/g, '');
                if (!/^[0-9]{10}$/.test(telefono)) error = 'Ingresa un teléfono válido de 10 dígitos';
                break;
            case 'expectativas':
                const texto = campo.value.trim();
                if (texto.length < 10) error = 'Describe tu interés con al menos 10 caracteres';
                else if (texto.length > 500) error = 'Máximo 500 caracteres';
                break;
        }
        
        if (error) {
            mostrarError(campo, error);
            return false;
        } else {
            limpiarError(campo);
            return true;
        }
    }
    
    function mostrarError(campo, mensaje) {
        campo.classList.add('border-red-500', 'bg-red-50');
        campo.classList.remove('border-gray-300');
        
        const errorDiv = document.getElementById(`${campo.id}-error`);
        if (errorDiv) {
            errorDiv.textContent = mensaje;
            errorDiv.classList.remove('hidden');
        }
    }
    
    function limpiarError(campo) {
        campo.classList.remove('border-red-500', 'bg-red-50');
        campo.classList.add('border-gray-300');
        
        const errorDiv = document.getElementById(`${campo.id}-error`);
        if (errorDiv) {
            errorDiv.classList.add('hidden');
        }
    }
    
    function mostrarMensaje(tipo, mensaje) {
        const colores = {
            success: 'bg-green-50 border-green-300 text-green-800',
            error: 'bg-red-50 border-red-300 text-red-800',
            loading: 'bg-blue-50 border-blue-300 text-blue-800'
        };
        
        messageContainer.innerHTML = `
            <div class="border p-4 rounded-md ${colores[tipo]} flex items-center gap-2">
                <span>${mensaje}</span>
            </div>
        `;
        
        messageContainer.classList.remove('hidden');
    }
    
    // Validación en tiempo real
    campos.forEach(campo => {
        campo.addEventListener('blur', () => {
            validarCampo(campo);
        });
        
        campo.addEventListener('input', () => {
            if (campo.classList.contains('border-red-500')) {
                limpiarError(campo);
            }
        });
    });
    
    // Contador de caracteres
    const expectativasField = document.getElementById('expectativas');
    const contadorCaracteres = document.getElementById('contador-caracteres');
    
    if (expectativasField && contadorCaracteres) {
        expectativasField.addEventListener('input', () => {
            const currentLength = expectativasField.value.length;
            contadorCaracteres.textContent = `${currentLength}/500 caracteres`;
        });
    }
    
    // Envío del formulario
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        
        if (formularioEnviado) return;
        
        messageContainer.classList.add('hidden');
        
        // Validar todos los campos
        let todoValido = true;
        let primerError = null;
        
        campos.forEach(campo => {
            if (!validarCampo(campo)) {
                todoValido = false;
                if (!primerError) {
                    primerError = campo;
                }
            }
        });
        
        if (!todoValido) {
            mostrarMensaje('error', mensajes.corregirErrores);
            if (primerError) {
                primerError.focus();
            }
            return;
        }
        
        const boton = form.querySelector('button[type="submit"]');
        const textoOriginal = boton.textContent;
        
        try {
            boton.textContent = mensajes.enviando;
            boton.disabled = true;
            mostrarMensaje('loading', mensajes.procesando);
            
            // Recopilar datos
            const datos = {
                nombre: form.querySelector('#nombre').value.trim(),
                email: form.querySelector('#email').value.trim(),
                telefono: form.querySelector('#telefono').value.trim(),
                fecha: form.querySelector('#fecha').value,
                estadia: form.querySelector('#estadia').value,
                personas: form.querySelector('#personas').value,
                expectativas: form.querySelector('#expectativas').value.trim()
            };
            
            // Validación anti-spam
            if (!validarAntiSpam(datos)) {
                mostrarMensaje('success', mensajes.exito);
                formularioEnviado = true;
                return;
            }
            
            // Crear mensaje de WhatsApp
            const mensajeWhatsApp = `🏠 *SOLICITUD RESERVA PIXEL LIVING*
📍 ${estudioNombre}

👤 *DATOS PERSONALES:*
- Nombre: ${datos.nombre}
- Email: ${datos.email}
- Teléfono: ${datos.telefono}

📅 *DETALLES:*
- Fecha ingreso: ${datos.fecha || 'Por coordinar'}
- Duración: ${datos.estadia || 'Por definir'}
- Personas: ${datos.personas || '1'}

💬 *MENSAJE:*
${datos.expectativas}

---
📧 Copia enviada por email
⏰ ${new Date().toLocaleString(currentLang === 'es' ? 'es-CO' : 'en-US')}
🌐 pixelliving.co`;
            
            // Enviar email
            const formData = new FormData();
            formData.append('Nombre', datos.nombre);
            formData.append('Email', datos.email);
            formData.append('Teléfono', datos.telefono);
            formData.append('Estudio_Solicitado', estudioNombre);
            formData.append('Fecha_de_Ingreso', datos.fecha || 'Por coordinar');
            formData.append('Duración_Estadía', datos.estadia || 'Por definir');
            formData.append('Número_de_Personas', datos.personas || '1');
            formData.append('Expectativas_y_Mensaje', datos.expectativas);
            formData.append('_subject', `🏠 Nueva Reserva: ${estudioNombre} - ${datos.nombre}`);
            formData.append('_template', 'table');
            formData.append('_captcha', 'false');
            
            const response = await fetch('https://formsubmit.co/info@pixelliving.co', {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                formularioEnviado = true;
                mostrarMensaje('success', mensajes.exito);
                
                // WhatsApp controlado
                setTimeout(() => {
                    if (confirm(mensajes.whatsappConfirmacion)) {
                        const whatsappURL = `https://wa.me/573195895858?text=${encodeURIComponent(mensajeWhatsApp)}`;
                        window.open(whatsappURL, '_blank');
                    }
                }, 1000);
                
                // Resetear formulario
                setTimeout(() => {
                    form.reset();
                    campos.forEach(campo => limpiarError(campo));
                }, 2000);
                
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
            
        } catch (error) {
            console.error('❌ Error:', error);
            mostrarMensaje('error', mensajes.error);
            
            setTimeout(() => {
                if (confirm(mensajes.whatsappAlternativa)) {
                    const emergencyMsg = `🚨 Solicitud ${estudioNombre} - Error en formulario web`;
                    window.open(`https://wa.me/573195895858?text=${encodeURIComponent(emergencyMsg)}`, '_blank');
                }
            }, 500);

        } finally {
            boton.textContent = textoOriginal;
            boton.disabled = false;
        }
    });
    
    console.log('✅ Sistema configurado para:', estudioNombre);
});
</script>

<style>
/* Estilos responsive para el lightbox */
.lightbox-thumbnail {
  aspect-ratio: 1;
  flex-shrink: 0;
}

@media (max-width: 640px) {
  .lightbox-thumbnail {
    width: calc((100% - 2rem) / 5);
  }
}

@media (min-width: 641px) and (max-width: 1024px) {
  .lightbox-thumbnail {
    width: calc((100% - 3rem) / 6);
  }
}

@media (min-width: 1025px) {
  .lightbox-thumbnail {
    width: calc((100% - 4rem) / 8);
  }
}

@media (hover: hover) {
  .lightbox-thumbnail:hover {
    opacity: 1 !important;
    transform: scale(1.05);
  }
}

.lightbox-thumbnail:focus {
  outline: 2px solid #ffd700;
  outline-offset: 2px;
  opacity: 1 !important;
}
</style>