---
// src/components/Header.astro - ✅ CORREGIDO PARA 3 IDIOMAS
import { getLanguageFromUrl, t, setCurrentLanguage } from '../i18n/utils/translator';
import LanguageSelector from './LanguageSelector.astro';

// Detectar idioma actual
const currentLang = getLanguageFromUrl(Astro.url.pathname);
setCurrentLanguage(currentLang);

// ⭐ GENERAR PREFIJO DE URL SEGÚN IDIOMA
const langPrefix = 
  currentLang === 'en' ? '/en' :
  currentLang === 'zh' ? '/zh' : '';

// ⭐ NAVEGACIÓN CON PREFIJO DE IDIOMA
const navItems = [
  { href: `${langPrefix}/#vive-pixel`, text: t('nav.why_pixel'), id: "vive-pixel" },
  { href: `${langPrefix}/#espacios`, text: t('nav.studios'), id: "espacios" },
  { href: `${langPrefix}/#precios`, text: t('nav.pricing'), id: "precios" },
  { href: `${langPrefix}/#ubicacion`, text: t('nav.location'), id: "ubicacion" },
  { href: `${langPrefix}/#coliving`, text: t('nav.coliving'), id: "coliving" },
  { href: `${langPrefix}/#reservas`, text: t('nav.booking'), id: "reservas" },
  { href: `${langPrefix}/#faq`, text: t('nav.faq'), id: "faq" }
];

// ⭐ LOGO HREF CON IDIOMA
const logoHref = 
  currentLang === 'en' ? '/en' :
  currentLang === 'zh' ? '/zh' : '/';
---

<header id="header" class="header">
  <div class="header-container">
    
    <!-- Logo con URL correcta -->
    <a href={logoHref} class="logo-link" aria-label={t('common.home')}>
      <img 
        src="/images/logo-pixel-living.webp" 
        alt="Pixel Living" 
        class="logo" 
        width="120"
        height="44"
        loading="eager"
      />
    </a>
    
    <!-- Desktop Navigation -->
    <nav class="nav-desktop" role="navigation" aria-label={t('nav.main_navigation')}>
      {navItems.map((item) => (
        <a 
          href={item.href}
          class="nav-link"
          data-section={item.id}
        >
          {item.text}
        </a>
      ))}
    </nav>
    
    <!-- Desktop Actions -->
    <div class="nav-actions">
      <LanguageSelector />
    </div>
    
    <!-- Mobile Menu -->
    <div class="mobile-controls">
      <div class="mobile-lang">
        <LanguageSelector />
      </div>
      
      <button 
        id="menuBtn" 
        class="menu-btn"
        aria-label="Menú"
        aria-expanded="false"
        aria-controls="mobile-nav"
        type="button"
      >
        <span class="menu-icon"></span>
        <span class="menu-icon"></span>
        <span class="menu-icon"></span>
      </button>
    </div>
  </div>
  
  <!-- Mobile Navigation -->
  <nav id="mobileNav" class="nav-mobile" aria-hidden="true">
    {navItems.map((item) => (
      <a 
        href={item.href}
        class="nav-mobile-link"
        data-section={item.id}
      >
        {item.text}
      </a>
    ))}
  </nav>
</header>

<style>
  /* ===== VARIABLES CSS ===== */
  .header {
    --header-height: 70px;
    --header-bg: rgba(0, 0, 0, 0.95);
    --header-border: rgba(255, 255, 255, 0.1);
    --text-color: #ffffff;
    --accent-color: #FFCC33;
    --transition: all 0.2s ease;
  }

  /* ===== HEADER BASE ===== */
  .header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: var(--header-height);
    background: var(--header-bg);
    backdrop-filter: blur(12px);
    border-bottom: 1px solid var(--header-border);
    z-index: 50;
    will-change: transform;
  }

  .header-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  /* ===== LOGO ===== */
  .logo-link {
    display: flex;
    align-items: center;
    text-decoration: none;
    z-index: 60;
  }

  .logo {
    height: 44px;
    width: auto;
    transition: var(--transition);
  }

  .logo:hover {
    transform: scale(1.05);
  }

  /* ===== NAVIGATION DESKTOP ===== */
  .nav-desktop {
    display: none;
    align-items: center;
    gap: 2rem;
  }

  @media (min-width: 768px) {
    .nav-desktop {
      display: flex;
    }
  }

  .nav-link {
    color: var(--text-color);
    text-decoration: none;
    font-weight: 500;
    font-size: 0.95rem;
    transition: var(--transition);
    position: relative;
    padding: 0.5rem 0;
  }

  .nav-link:hover {
    color: var(--accent-color);
    transform: translateY(-1px);
  }

  .nav-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--accent-color);
    transition: width 0.3s ease;
  }

  .nav-link:hover::after {
    width: 100%;
  }

  /* ===== ACTIONS ===== */
  .nav-actions {
    display: none;
    align-items: center;
    gap: 1rem;
  }

  @media (min-width: 768px) {
    .nav-actions {
      display: flex;
    }
  }

  /* ===== MOBILE CONTROLS ===== */
  .mobile-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  @media (min-width: 768px) {
    .mobile-controls {
      display: none;
    }
  }

  .mobile-lang {
    display: block;
  }

  /* ===== MENU BUTTON ===== */
  .menu-btn {
    display: flex;
    flex-direction: column;
    justify-content: center;
    width: 32px;
    height: 32px;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
    z-index: 60;
  }

  .menu-icon {
    width: 24px;
    height: 2px;
    background: var(--text-color);
    margin: 3px 0;
    transition: var(--transition);
    transform-origin: center;
  }

  /* Menu button animation */
  .menu-btn[aria-expanded="true"] .menu-icon:nth-child(1) {
    transform: rotate(45deg) translate(6px, 6px);
  }

  .menu-btn[aria-expanded="true"] .menu-icon:nth-child(2) {
    opacity: 0;
  }

  .menu-btn[aria-expanded="true"] .menu-icon:nth-child(3) {
    transform: rotate(-45deg) translate(6px, -6px);
  }

  /* ===== MOBILE NAVIGATION ===== */
  .nav-mobile {
    position: fixed;
    top: var(--header-height);
    left: 0;
    right: 0;
    background: var(--header-bg);
    backdrop-filter: blur(12px);
    border-bottom: 1px solid var(--header-border);
    padding: 2rem 1rem;
    transform: translateY(-100%);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 40;
  }

  .nav-mobile.show {
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
  }

  .nav-mobile-link {
    display: block;
    color: var(--text-color);
    text-decoration: none;
    font-weight: 500;
    font-size: 1.1rem;
    padding: 1rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    transition: var(--transition);
  }

  .nav-mobile-link:hover {
    color: var(--accent-color);
    padding-left: 1rem;
  }

  .nav-mobile-link:last-child {
    border-bottom: none;
  }

  /* ===== RESPONSIVE ADJUSTMENTS ===== */
  @media (max-width: 768px) {
    .header-container {
      padding: 0 1rem;
    }
    
    .logo {
      height: 38px;
    }
  }

  /* ===== ACCESSIBILITY ===== */
  @media (prefers-reduced-motion: reduce) {
    .header,
    .nav-link,
    .menu-icon,
    .nav-mobile {
      transition: none;
    }
  }

  /* Focus states */
  .logo-link:focus-visible,
  .nav-link:focus-visible,
  .menu-btn:focus-visible {
    outline: 2px solid var(--accent-color);
    outline-offset: 2px;
    border-radius: 4px;
  }
</style>

<script>
  // TypeScript para Header con manejo de errores mejorado
  
  // Types para mejor type safety
  interface HeaderElements {
    menuBtn: HTMLButtonElement | null;
    mobileNav: HTMLElement | null;
    navLinks: NodeListOf<HTMLAnchorElement>;
    body: HTMLBodyElement;
  }
  
  // Elementos del DOM con types estrictos
  const elements: HeaderElements = {
    menuBtn: document.getElementById('menuBtn') as HTMLButtonElement | null,
    mobileNav: document.getElementById('mobileNav') as HTMLElement | null,
    navLinks: document.querySelectorAll('[data-section]') as NodeListOf<HTMLAnchorElement>,
    body: document.body as HTMLBodyElement
  };
  
  // Early return si elementos críticos no existen
  if (!elements.menuBtn || !elements.mobileNav) {
  } else {
    
    // ===== STATE WITH EXPLICIT TYPES =====
    let isMenuOpen: boolean = false;
    let resizeTimer: number | undefined = undefined;
    
    // ===== CONSTANTS =====
    const HEADER_HEIGHT: number = 80;
    const MOBILE_BREAKPOINT: number = 768;
    const ANIMATION_DELAY: number = 100;
    const RESIZE_DEBOUNCE: number = 150;
    
    // ===== UTILITY FUNCTIONS =====
    function isValidNode(target: EventTarget | null): target is Node {
      return target !== null && target instanceof Node;
    }
    
    function isValidElement(element: Element | null): element is HTMLElement {
      return element !== null && element instanceof HTMLElement;
    }
    
    function safeQuerySelector<T extends Element = Element>(
      selector: string
    ): T | null {
      try {
        return document.querySelector<T>(selector);
      } catch {
        return null;
      }
    }
    
    // ===== CORE FUNCTIONS =====
    function toggleMenu(): void {
      isMenuOpen = !isMenuOpen;
      
      // Batch DOM updates con requestAnimationFrame
      requestAnimationFrame(() => {
        if (!elements.menuBtn || !elements.mobileNav) return;
        
        elements.menuBtn.setAttribute('aria-expanded', isMenuOpen.toString());
        elements.mobileNav.setAttribute('aria-hidden', (!isMenuOpen).toString());
        
        if (isMenuOpen) {
          elements.mobileNav.classList.add('show');
          elements.body.style.overflow = 'hidden';
        } else {
          elements.mobileNav.classList.remove('show');
          elements.body.style.overflow = '';
        }
      });
    }
    
    function closeMenu(): void {
      if (isMenuOpen) {
        toggleMenu();
      }
    }
    
    function handleNavClick(event: Event): void {
      const target = event.target;
      
      // Type guard estricto
      if (!target || !(target instanceof HTMLAnchorElement)) {
        return;
      }
      
      const href = target.getAttribute('href');
      
      if (!href || !href.includes('/#')) {
        return;
      }
      
      event.preventDefault();
      
      // ⭐ EXTRAER SECCIÓN DESDE HREF (FUNCIONA CON PREFIJOS DE IDIOMA)
      const sectionMatch = href.match(/#(.+)$/);
      const targetId = sectionMatch ? sectionMatch[1] : null;
      
      if (!targetId) return;
      
      const currentPath = window.location.pathname;
      const isHomepage = 
        currentPath === '/' || 
        currentPath === '/en' || 
        currentPath === '/zh';
      
      if (isHomepage) {
        // HOMEPAGE: Scroll interno
        const targetElement = safeQuerySelector<HTMLElement>(`#${targetId}`);
        
        if (targetElement) {
          const header = document.querySelector('header') as HTMLElement | null;
          const headerHeight = header?.offsetHeight || HEADER_HEIGHT;
          const targetPosition = targetElement.offsetTop - headerHeight - 20;
          
          // Smooth scroll con fallback
          try {
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
          } catch {
            // Fallback para navegadores que no soportan smooth scroll
            window.scrollTo(0, targetPosition);
          }
          
          // Update URL
          try {
            history.pushState(null, '', href);
          } catch (error) {
            console.warn('History API not available:', error);
          }
        }
      } else {
        // ⭐ OTRAS PÁGINAS: Redirigir respetando idioma
        const lang = 
          currentPath.startsWith('/zh') ? 'zh' :
          currentPath.startsWith('/en') ? 'en' : 'es';
        
        const langPrefix = 
          lang === 'en' ? '/en' :
          lang === 'zh' ? '/zh' : '';
        
        window.location.href = `${langPrefix}/#${targetId}`;
      }
      
      // Cerrar menú móvil
      closeMenu();
    }
    
    function handleResize(): void {
      clearTimeout(resizeTimer);
      resizeTimer = window.setTimeout(() => {
        if (window.innerWidth >= MOBILE_BREAKPOINT && isMenuOpen) {
          closeMenu();
        }
      }, RESIZE_DEBOUNCE);
    }
    
    // ===== EVENT LISTENERS =====
    
    // Menu toggle
    elements.menuBtn.addEventListener('click', toggleMenu);
    
    // Navigation clicks
    elements.navLinks.forEach(link => {
      link.addEventListener('click', handleNavClick);
    });
    
    // Resize handler
    window.addEventListener('resize', handleResize);
    
    // Close menu on outside click
    document.addEventListener('click', (event: Event) => {
      if (!isMenuOpen || !isValidNode(event.target)) return;
      
      const target = event.target as Node;
      const header = document.querySelector('header');
      
      if (header && !header.contains(target)) {
        closeMenu();
      }
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isMenuOpen) {
        closeMenu();
        elements.menuBtn?.focus();
      }
    });
    
  }
</script>