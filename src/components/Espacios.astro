---
//src/components/Espacios.astro - TRADUCIDO
// IMPORTAR I18N - AÑADIDO
import { getLanguageFromUrl, t, setCurrentLanguage } from '../i18n/utils/translator';

// Detectar idioma actual - AÑADIDO
const currentLang = getLanguageFromUrl(Astro.url.pathname);
setCurrentLanguage(currentLang);

// Importar el componente LightboxModal
import LightboxModal from '../components/LightboxModal.astro';

import iconoCama from '../assets/icoos_24-Breakfast.svg'; 
import iconoCocina from '../assets/icoos_17-Key card.svg';
import iconoEscritorio from '../assets/icoos_23-Bell.svg';
import iconoWifi from '../assets/icoos_18-Key.svg';
import iconoServicios from '../assets/icoos_22-Air condition.svg';
import iconoPrivado from '../assets/icoos_16-Bed.svg';

// Definición de tipos
interface Estudio {
  id: string;
  nombre: string;
  color: string;
  imagen: string;
  descripcion: string;
  metros: string;
  precio: string;
  galeria: string[];
  caracteristicas: string[];
  incluye: string[];
}

interface EstudiosRecord {
  [key: string]: Estudio;
}

// Estudios completos con datos reales del proyecto
const estudiosCompletos: EstudiosRecord = {
  'jade': {
    id: 'jade',
    nombre: 'Estudio Jade',
    color: 'bg-green-500',
    imagen: '/images/estudios/jade/pixel-jade-room-004.webp',
    descripcion: t('estudios.jade.descripcion_1'),
    metros: '29m²',
    precio: t('estudios.jade.precio'),
    galeria: [ 
      '/images/estudios/jade/pixel-jade-room-005.webp', 
      '/images/estudios/jade/pixel-jade-room-001.webp',  
      '/images/estudios/jade/pixel-jade-room-002.webp',   
      '/images/estudios/jade/pixel-jade-room-006.webp',
      '/images/estudios/jade/pixel-jade-room-007.webp',
      '/images/estudios/jade/Pixel-jade-001.webp'
    ],
    caracteristicas: [
  'Apartaestudio de 29 metros cuadrados',
  'Cuarto adicional con espacio de trabajo y cama auxiliar', 
  'Balcón privado para disfrutar el aire libre',
  'Cama doble',
  'Cocina privada equipada',
  'Wifi ilimitado de alta velocidad',
  'Smart TV',
  'Lavadora dentro del apartamento',
  'Baño privado',
  'Muebles y electrodomésticos modernos'
],

incluye: [
  'Todo incluido en un solo pago mensual',
  'Servicios públicos, administración y acceso total a las zonas comunes',
  'Wifi de alta velocidad',
  'Servicios básicos (agua, luz, gas)', 
  'Limpieza quincenal',
  'Acceso a zonas comunes',
  'Smart TV con Netflix',
  'Ropa de cama y toallas'
]
  },
  'zian': {
    id: 'zian',
    nombre: 'Estudio Zian',
    color: 'bg-blue-500',
    imagen: '/images/estudios/zian/pixel-zian-room-008.webp',
    descripcion: t('estudios.zian.descripcion_1'),
    metros: '29m²',
    precio: t('estudios.zian.precio'),
    galeria: [
      '/images/estudios/zian/pixel-zian-room-001.webp', 
      '/images/estudios/zian/pixel-zian-room-002.webp', 
      '/images/estudios/zian/pixel-zian-room-003.webp', 
      '/images/estudios/zian/pixel-zian-room-004.webp', 
      '/images/estudios/zian/pixel-zian-room-005.webp',
      '/images/estudios/zian/pixel-zian-room-006.webp', 
      '/images/estudios/zian/pixel-zian-room-007.webp', 
      '/images/estudios/zian/pixel-zian-room-009.webp', 
      '/images/estudios/zian/pixel-zian-room-010.webp' 
    ],
    caracteristicas: [
  'Apartaestudio de 29 metros cuadrados',
  'Cuarto adicional con espacio de trabajo y cama auxiliar', 
  'Balcón privado para disfrutar el aire libre',
  'Cama doble',
  'Cocina privada equipada',
  'Wifi ilimitado de alta velocidad',
  'Smart TV',
  'Lavadora dentro del apartamento',
  'Baño privado',
  'Muebles y electrodomésticos modernos'
],

incluye: [
  'Todo incluido en un solo pago mensual',
  'Servicios públicos, administración y acceso total a las zonas comunes',
  'Wifi de alta velocidad',
  'Servicios básicos (agua, luz, gas)', 
  'Limpieza quincenal',
  'Acceso a zonas comunes',
  'Smart TV con Netflix',
  'Ropa de cama y toallas'
]
  },
  'indigo': {
    id: 'indigo',
    nombre: 'Estudio Índigo',
    color: 'bg-indigo-500',
    imagen: '/images/estudios/indigo/pixel-indigo-room-005.webp',
    descripcion: t('estudios.indigo.descripcion_1'),
    metros: '29m²',
   precio: t('estudios.indigo.precio'),
    galeria: [
      '/images/estudios/indigo/pixel-indigo-room-001.webp', 
      '/images/estudios/indigo/pixel-indigo-room-002.webp', 
      '/images/estudios/indigo/pixel-indigo-room-003.webp', 
      '/images/estudios/indigo/pixel-indigo-room-004.webp', 
      '/images/estudios/indigo/pixel-indigo-room-006.webp',
      '/images/estudios/indigo/pixel-indigo-room-007.webp', 
      '/images/estudios/indigo/pixel-indigo-room-008.webp', 
      '/images/estudios/indigo/pixel-indigo-room-009.webp', 
      '/images/estudios/indigo/pixel-indigo-room-010.webp',
      '/images/estudios/indigo/pixel-indigo-room-011.webp', 
      '/images/estudios/indigo/pixel-indigo-room-012.webp', 
      '/images/estudios/indigo/pixel-indigo-room-013.webp', 
      '/images/estudios/indigo/pixel-indigo-room-014.webp', 
      '/images/estudios/indigo/pixel-indigo-room-016.webp', 
      '/images/estudios/indigo/pixel-indigo-room-017.webp', 
      '/images/estudios/indigo/pixel-indigo-room-018.webp'
    ],
    caracteristicas: [
  'Apartaestudio de 29 metros cuadrados',
  'Cuarto adicional con espacio de trabajo y cama auxiliar', 
  'Balcón privado para disfrutar el aire libre',
  'Cama doble',
  'Cocina privada equipada',
  'Wifi ilimitado de alta velocidad',
  'Smart TV',
  'Lavadora dentro del apartamento',
  'Baño privado',
  'Muebles y electrodomésticos modernos'
],

incluye: [
  'Todo incluido en un solo pago mensual',
  'Servicios públicos, administración y acceso total a las zonas comunes',
  'Wifi de alta velocidad',
  'Servicios básicos (agua, luz, gas)', 
  'Limpieza quincenal',
  'Acceso a zonas comunes',
  'Smart TV con Netflix',
  'Ropa de cama y toallas'
]
  }
};

// Cambiar la interfaz Caracteristica
interface Caracteristica {
  icono: ImageMetadata;
  texto: string;
}

// CARACTERÍSTICAS TRADUCIDAS - CAMBIADO
const caracteristicas: Caracteristica[] = [
  {
    icono: iconoCama,
    texto: t('espacios.caracteristicas.0') // 'Cama doble'
  },
  {
    icono: iconoCocina,
    texto: t('espacios.caracteristicas.1') // 'Cocina equipada'
  },
  {
    icono: iconoEscritorio,
    texto: t('espacios.caracteristicas.2') // 'Escritorio de trabajo'
  },
  {
    icono: iconoWifi,
    texto: t('espacios.caracteristicas.3') // 'WiFi de alta velocidad'
  },
  {
    icono: iconoServicios,
    texto: t('espacios.caracteristicas.4') // 'Servicios incluidos'
  },
  {
    icono: iconoPrivado,
    texto: t('espacios.caracteristicas.5') // 'Espacio privado y tranquilo'
  }
];

// Derivar arrays simplificados
interface EstudioSimplificado {
  id: string;
  nombre: string;
  color: string;
  imagen: string;
  descripcion: string;
  metros: string;
  precio: string;
}

interface LightboxEstudio {
  nombre: string;
  imagenPrincipal: string;
  imagenes: string[];
  color: string;
}

interface LightboxData {
  [key: string]: LightboxEstudio;
}

const estudios: EstudioSimplificado[] = Object.values(estudiosCompletos).map(estudio => ({
  id: estudio.id,
  nombre: estudio.nombre,
  color: estudio.color,
  imagen: estudio.imagen,
  descripcion: estudio.descripcion,
  metros: estudio.metros,
  precio: estudio.precio
}));

const lightboxData: LightboxData = Object.values(estudiosCompletos).reduce((result, estudio) => {
  result[estudio.id] = {
    nombre: estudio.nombre,
    imagenPrincipal: estudio.imagen,
    imagenes: estudio.galeria,
    color: estudio.color
  };
  return result;
}, {} as LightboxData);
---

<section id="espacios" class="section bg-pixel-blue/5" role="region" aria-labelledby="espacios-heading">
  <div class="container">
    <div class="text-center bg-pixel-blue rounded-t-2xl  mx-0 md:mx-20">
      <!-- ✅ BADGE TRADUCIDO -->
      <span class="inline-block text-white font-semibold text-sm uppercase tracking-wider mb-2 pt-8">{t('espacios.badge')}</span>
      
      <!-- ✅ TÍTULO TRADUCIDO -->
      <h2 id="espacios-heading" class="text-4xl md:text-7xl font-normal px-4 md:px-18 text-white">
        {t('espacios.title')} <span class="text-blue-200">{t('espacios.title_highlight')}</span>
      </h2>
      
      <!-- Mejora del copy según auditoría -->
      <div class="text-lg md:text-xl font-normal text-white max-w-5xl pb-6 px-4 mx-auto mt-6">
        <p class="mb-4">
  {t("espacios.description")}{" "}
  <strong class="text-blue-200">{t("espacios.description2")}</strong>{" "}
  {t("espacios.description3")} {t("espacios.espacio")}
</p>
        
        <!-- Destacar beneficios clave según auditoría -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6 pb-4">
          <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
            <div class="text-pixel-yellow font-bold">✓ {t('espacios.beneficios_destacados.habitacion_adicional')}</div>
            <div class="text-sm">{t('espacios.beneficios_destacados.habitacion_desc')}</div>
          </div>
          <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
            <div class="text-pixel-yellow font-bold">✓ {t('espacios.beneficios_destacados.balcon_privado')}</div>
            <div class="text-sm">{t('espacios.beneficios_destacados.balcon_desc')}</div>
          </div>
          <div class="bg-white/10 rounded-lg p-3 backdrop-blur-sm">
            <div class="text-pixel-yellow font-bold">✓ {t('espacios.beneficios_destacados.todo_incluido')}</div>
            <div class="text-sm">{t('espacios.beneficios_destacados.todo_desc')}</div>
          </div>
        </div>
      </div>

       <!-- ✅ MENSAJE FINAL TRADUCIDO -->
      <p class="text-white text-lg md:text-xl  pb-4 px-4 max-w-3xl mx-auto font-normal">
        {t('espacios.mensaje_final')}
      </p>
    </div>
    
    <!-- Carrusel de apartaestudios - ESTRUCTURA CORREGIDA -->
    <div class="bg-pixel-blue md:mx-20 mx-0">
      <!-- Contenedor del carrusel con padding interno -->
      <div class="relative max-w-7xl  mx-auto" id="carousel-container">
        
        <!-- Área de contenido con padding para los botones -->
        <div class="px-4 md:px-16 py-8  relative overflow-hidden">
          
          <!-- Instrucciones para lectores de pantalla -->
          <div class="sr-only" id="carousel-instructions">
            Use las flechas izquierda y derecha para navegar, o presione Tab para explorar cada estudio individualmente.
          </div>
          
          <!-- Botones de navegación - POSICIONADOS CORRECTAMENTE -->
          <button 
            class="absolute left-2 top-1/2 z-10 -translate-y-1/2 bg-white rounded-lg p-3 shadow-lg hover:bg-gray-100 focus:outline-none disabled:opacity-30 disabled:cursor-not-allowed border border-pixel-blue transition-all duration-200 md:hidden" 
            id="prev-btn"
            aria-label="Ver apartaestudio anterior"
            aria-describedby="carousel-instructions"
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-pixel-blue" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
            </svg>
          </button>
          
          <button 
            class="absolute right-2 top-1/2 z-10 -translate-y-1/2 bg-white rounded-lg p-3 shadow-lg hover:bg-gray-100 focus:outline-none disabled:opacity-30 disabled:cursor-not-allowed border border-pixel-blue transition-all duration-200 md:hidden" 
            id="next-btn"
            aria-label="Ver apartaestudio siguiente"
            aria-describedby="carousel-instructions"
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-pixel-blue" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
            </svg>
          </button>
          
          <!-- Carrusel de slides -->
          <div 
            class="flex transition-transform duration-500 ease-in-out -mx-2" 
            id="carousel-slides"
            role="group"
            aria-label="Carrusel de apartaestudios"
            aria-live="polite"
          >
            {estudios.map((estudio, index) => (
              <article 
                class="w-full md:w-1/2 lg:w-1/3 flex-shrink-0 px-2 transition-opacity duration-300" 
                data-slide-index={index} 
                data-estudio-id={estudio.id}
                aria-labelledby={`estudio-${estudio.id}-title`}
              >
                <div class="bg-white rounded-lg overflow-hidden shadow-lg h-full flex flex-col transform transition duration-300 hover:-translate-y-2 hover:shadow-xl border-2 border-pixel-blue pixel-hover">
                  <div class="relative">
                    <img 
                      src={estudio.imagen} 
                      alt={`${estudio.nombre} - Vista principal del apartaestudio`}
                      class="w-full h-64 object-cover main-image cursor-pointer" 
                      data-estudio-id={estudio.id}
                      tabindex="0"
                      role="button"
                      aria-label={`Ver galería completa de ${estudio.nombre}`}
                    />
                    
                    <div class="absolute top-4 right-4 bg-white py-1 px-3 rounded-md shadow-md border border-pixel-blue">
                      <span class="font-medium text-sm" aria-label={`Área: ${estudio.metros}`}>{estudio.metros}</span>
                    </div>
                    
                    <!-- Botón para abrir galería -->
                    <button 
                      class="absolute bottom-4 right-4 bg-black bg-opacity-60 p-2 rounded-full text-white hover:bg-opacity-80 open-gallery-btn focus:bg-opacity-80 transition-all duration-200" 
                      data-estudio-id={estudio.id}
                      aria-label={`Abrir galería completa de ${estudio.nombre}`}
                      title={`Ver más fotos de ${estudio.nombre}`}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15" />
                      </svg>
                    </button>
                    
                    <!-- Miniaturas de galería -->
                    <div class="absolute bottom-4 left-4 flex space-x-1" role="group" aria-label={`Vista previa de imágenes de ${estudio.nombre}`}>
                      <!-- Imagen principal como primera miniatura -->
                      <button 
                        class="w-8 h-8 rounded-md overflow-hidden border border-white cursor-pointer gallery-thumb hover:scale-110 focus:scale-110 transition-transform" 
                        data-estudio-id={estudio.id}
                        data-img-index={-1}
                        aria-label={`Ver imagen principal de ${estudio.nombre}`}
                        tabindex="0"
                      >
                        <img src={estudio.imagen} alt="" class="w-full h-full object-cover" />
                      </button>
                      
                      <!-- Imágenes de la galería (máximo 3 miniaturas adicionales) -->
                      {estudiosCompletos[estudio.id].galeria.slice(0, 3).map((img: string, imgIndex: number) => (
                        <button 
                          class="w-8 h-8 rounded-md overflow-hidden border border-white cursor-pointer gallery-thumb hover:scale-110 focus:scale-110 transition-transform" 
                          data-estudio-id={estudio.id}
                          data-img-index={imgIndex}
                          aria-label={`Ver imagen ${imgIndex + 2} de ${estudio.nombre}`}
                          tabindex="0"
                        >
                          <img src={img} alt="" class="w-full h-full object-cover" />
                        </button>
                      ))}
                    </div>
                  </div>
                  
                  <div class="p-4 flex-grow">
                    <h3 id={`estudio-${estudio.id}-title`} class="text-xl font-bold mb-2 text-pixel-blue">
                      {estudio.nombre}
                    </h3>
                    <p class="text-gray-600 mb-3">{estudio.descripcion}</p>
                    
                    <div class="mt-auto">
                      <div class="flex justify-between items-center">
                        <span class="text-xl font-bold text-pixel-blue" aria-label={`Precio desde ${estudio.precio}`}>
                          {estudio.precio}
                        </span>
                        <a 
                          href={currentLang === 'en' ? `/en/estudio/${estudio.id}` : `/estudio/${estudio.id}`} class="text-pixel-blue font-medium inline-flex items-center group ver-detalles-btn hover:underline focus:underline">
  {t('espacios.ver_detalles')}
                          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 ml-1 transform transition-transform group-hover:translate-x-1" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
                          </svg>
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              </article>
            ))}
          </div>
        </div>
        
        <!-- Indicadores -->
        <div class="flex justify-center pb-8" id="carousel-indicators">
  <div class="flex space-x-2" role="tablist" aria-label="Navegación de apartaestudios">
    {estudios.map((_, index) => (
      <button 
        class="w-4 h-4 bg-gray-200 focus:outline-none transition-colors duration-300 rounded-sm border border-pixel-blue hover:scale-110 focus:scale-110 focus:ring-2 focus:ring-pixel-blue focus:ring-offset-2" 
        data-index={index}
        role="tab"
        aria-label={`Ver apartaestudio ${index + 1} de ${estudios.length}`}
        aria-selected={index === 0 ? 'true' : 'false'}
        aria-controls={`estudio-${index}`}
        tabindex={index === 0 ? '0' : '-1'}
        id={`tab-${index}`}
        data-astro-cid-wjo5qhow=""
      >
        <span class="sr-only">Apartaestudio {index + 1}</span>
      </button>
    ))}
  </div>
</div>
    </div>
    
    <!-- Características -->
     <div class="mx-4">
    <div class="bg-white  rounded-lg shadow-lg p-4 md:p-10 max-w-4xl  mt-2 mb-16 border-2 mx-auto  border-pixel-blue">
      <!-- ✅ TÍTULO CARACTERÍSTICAS TRADUCIDO -->
      <h3 class="text-4xl font-normal mb-6 text-center text-pixel-blue">{t('espacios.caracteristicas_titulo')}</h3>
      
      <div class="grid grid-cols-2 md:grid-cols-3 gap-6" role="list">
        {caracteristicas.map((item: { icono: ImageMetadata; texto: string }) => (
          <div class="flex items-start space-x-3" role="listitem">
            <div class="flex-shrink-0 p-1 rounded-md border border-pixel-blue" aria-hidden="true">
              <img 
                src={item.icono.src} 
                alt="" 
                class="w-8 h-8 object-contain"
              />
            </div>
            <div>
              <p class="font-normal text-sm md:text-lg ">{item.texto}</p>
            </div>
          </div>
        ))}
      </div>
      
      <div class="mt-8 text-center">
        <a 
          href="#reservas" 
          class="btn bg-pixel-blue hover:bg-blue-600 text-white inline-flex items-center border border-blue-700 pixel-hover focus:ring-4 focus:ring-blue-300 transition-all duration-200"
          aria-describedby="reservas-cta-desc"
        >
          {t('espacios.cta_disponibilidad')}
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 ml-2" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3" />
          </svg>
        </a>
        <p id="reservas-cta-desc" class="sr-only">Ir a la sección de reservas para solicitar disponibilidad de apartaestudios</p>
      </div>
    </div>
    </div>
    
    <!-- Importar el componente de lightbox responsivo -->
    <LightboxModal id="espacios-lightbox" showDetailsButton={true} showReservaButton={true} />
  </div>
</section>

<!-- CARGAR EL LIGHTBOX RESPONSIVO INTEGRADO -->
<script define:vars={{ lightboxData }}>
document.addEventListener('DOMContentLoaded', () => {
  console.log("=== ESPACIOS CON LIGHTBOX RESPONSIVO ===");
  
  // ===== HACER LIGHTBOX DATA DISPONIBLE GLOBALMENTE =====
  window.lightboxData = lightboxData || {};
  
  // ===== CONFIGURACIÓN RESPONSIVA =====
  const getThumbnailsPerView = () => {
    const width = window.innerWidth;
    if (width < 641) return 5;        // Móvil: 5 thumbnails
    if (width < 1025) return 6;       // Tablet: 6 thumbnails  
    return 8;                         // Desktop: 8 thumbnails
  };
  
  // ===== HELPERS TYPE-SAFE PARA ASTRO 5.x =====
  const getAccessibilityManager = () => {
    return (typeof window !== 'undefined' && window.PAM) ? window.PAM : null;
  };
  
  const announceCarouselChange = (current, total, title = '') => {
    const pam = getAccessibilityManager();
    if (pam && typeof pam.announceCarouselChange === 'function') {
      pam.announceCarouselChange(current, total, title);
    }
  };
  
  const trapFocus = (container) => {
    const pam = getAccessibilityManager();
    if (pam && typeof pam.trapFocus === 'function') {
      pam.trapFocus(container);
    }
  };
  
  const releaseFocusTrap = () => {
    const pam = getAccessibilityManager();
    if (pam && typeof pam.releaseFocusTrap === 'function') {
      pam.releaseFocusTrap();
    }
  };
  
  // Función para dispatch de eventos personalizado compatible con Astro 5.x
  const dispatchEstudioSeleccionado = (estudioId, estudioNombre) => {
    const event = new CustomEvent('estudioSeleccionado', {
      detail: { estudioId, estudioNombre },
      bubbles: true,
      cancelable: true
    });
    document.dispatchEvent(event);
  };
  
  // ===== VERIFICAR ELEMENTOS CRÍTICOS =====
  const container = document.getElementById('carousel-container');
  const slides = document.getElementById('carousel-slides');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  const indicators = document.querySelectorAll('#carousel-indicators button');
  const lightboxModal = document.getElementById('espacios-lightbox');
  const slideElements = document.querySelectorAll('[data-slide-index]');
  
  console.log("Elementos encontrados:", {
    container: !!container,
    slides: !!slides,
    prevBtn: !!prevBtn,
    nextBtn: !!nextBtn,
    indicators: indicators.length,
    lightboxModal: !!lightboxModal,
    slideElements: slideElements.length,
    lightboxData: Object.keys(window.lightboxData || {})
  });

  if (!container || !slides || !prevBtn || !nextBtn) {
    console.error("❌ Elementos del carrusel no encontrados");
    return;
  }

  if (!lightboxModal) {
    console.error("❌ Modal lightbox no encontrado");
    return;
  }

  // ===== VARIABLES CARRUSEL =====
  let currentIndex = 0;
  let slidesPerView = window.innerWidth < 768 ? 1 : window.innerWidth < 1024 ? 2 : 3;
  const totalSlides = indicators.length;
  let isMobile = () => window.innerWidth < 768;

  // ===== FUNCIONES CARRUSEL =====
  function updateCarousel() {
    console.log("Actualizando carrusel:", { currentIndex, slidesPerView, totalSlides, isMobile: isMobile() });
    
    // Calcular el ancho del slide basado en el contenedor padre
    const containerWidth = slides.parentElement.clientWidth;
    const slideWidth = containerWidth / slidesPerView;
    
    // Aplicar transformación
    slides.style.transform = `translateX(-${currentIndex * slideWidth}px)`;
    
    // En desktop, deshabilitar botones
    const isDesktop = !isMobile();
    
    // Actualizar botones - solo funcionales en móvil
    if (isDesktop) {
      prevBtn.disabled = true;
      nextBtn.disabled = true;
      prevBtn.setAttribute('aria-hidden', 'true');
      nextBtn.setAttribute('aria-hidden', 'true');
      prevBtn.style.display = 'none';
      nextBtn.style.display = 'none';
    } else {
      prevBtn.disabled = currentIndex === 0;
      nextBtn.disabled = currentIndex >= totalSlides - slidesPerView;
      prevBtn.setAttribute('aria-hidden', 'false');
      nextBtn.setAttribute('aria-hidden', 'false');
      prevBtn.style.display = 'block';
      nextBtn.style.display = 'block';
    }
    
    // Actualizar ARIA states
    prevBtn.setAttribute('aria-disabled', String(isDesktop || currentIndex === 0));
    nextBtn.setAttribute('aria-disabled', String(isDesktop || currentIndex >= totalSlides - slidesPerView));
    
    // Actualizar indicadores
    indicators.forEach((indicator, index) => {
      const isActive = index === currentIndex;
      indicator.classList.toggle('bg-pixel-blue', isActive);
      indicator.classList.toggle('bg-gray-200', !isActive);
      indicator.setAttribute('aria-selected', String(isActive));
      indicator.setAttribute('tabindex', isActive ? '0' : '-1');
    });
    
    // Anunciar cambio a lectores de pantalla (solo en móvil)
    if (!isDesktop && slideElements[currentIndex]) {
      const currentSlide = slideElements[currentIndex];
      const estudioNombre = currentSlide?.querySelector('h3')?.textContent || '';
      announceCarouselChange(currentIndex + 1, totalSlides, estudioNombre);
    }
  }

  // ===== EVENTOS CARRUSEL - SOLO EN MÓVIL =====
  prevBtn.addEventListener('click', () => {
    if (!isMobile()) return; // Bloquear en desktop
    
    if (currentIndex > 0) {
      currentIndex--;
      updateCarousel();
    }
  });

  nextBtn.addEventListener('click', () => {
    if (!isMobile()) return; // Bloquear en desktop
    
    if (currentIndex < totalSlides - slidesPerView) {
      currentIndex++;
      updateCarousel();
    }
  });

  // Navegación con teclado en indicadores (funciona en todas las resoluciones)
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      currentIndex = Math.min(index, totalSlides - slidesPerView);
      updateCarousel();
    });

    indicator.addEventListener('keydown', (e) => {
      let targetIndex = currentIndex;
      
      switch (e.key) {
        case 'ArrowLeft':
          e.preventDefault();
          targetIndex = Math.max(0, currentIndex - 1);
          break;
        case 'ArrowRight':
          e.preventDefault();
          targetIndex = Math.min(totalSlides - slidesPerView, currentIndex + 1);
          break;
        case 'Home':
          e.preventDefault();
          targetIndex = 0;
          break;
        case 'End':
          e.preventDefault();
          targetIndex = totalSlides - slidesPerView;
          break;
      }
      
      if (targetIndex !== currentIndex) {
        currentIndex = targetIndex;
        updateCarousel();
        indicators[currentIndex].focus();
      }
    });
  });

  // Responsive handling mejorado
  window.addEventListener('resize', () => {
    const newSlidesPerView = window.innerWidth < 768 ? 1 : window.innerWidth < 1024 ? 2 : 3;
    if (newSlidesPerView !== slidesPerView) {
      slidesPerView = newSlidesPerView;
      currentIndex = Math.min(currentIndex, Math.max(0, totalSlides - slidesPerView));
      updateCarousel();
    }
  });

  // Inicializar carrusel
  updateCarousel();

  // ===== CLASE LIGHTBOX RESPONSIVO INTEGRADA =====
  class ResponsiveLightbox {
    constructor(modalId, lightboxData) {
      this.modalId = modalId;
      this.lightboxData = lightboxData || {};
      this.currentEstudioId = '';
      this.currentImageIndex = 0;
      this.currentImages = [];
      this.thumbCarouselIndex = 0;
      this.thumbnailsPerView = getThumbnailsPerView();
      
      this.initializeElements();
      this.bindEvents();
    }
    
    initializeElements() {
      this.modal = document.getElementById(this.modalId);
      if (!this.modal) {
        console.error(`❌ Modal ${this.modalId} no encontrado`);
        return;
      }
      
      // Elementos principales
      this.image = this.modal.querySelector('.lightbox-image');
      this.title = this.modal.querySelector('.lightbox-title');
      this.closeBtn = this.modal.querySelector('.lightbox-close');
      this.prevBtn = this.modal.querySelector('.lightbox-prev');
      this.nextBtn = this.modal.querySelector('.lightbox-next');
      this.detailsLink = this.modal.querySelector('.lightbox-details-link');
      this.reservaLink = this.modal.querySelector('.lightbox-reserva-link');
      this.currentSpan = this.modal.querySelector('.lightbox-current');
      this.totalSpan = this.modal.querySelector('.lightbox-total');
      
      // Elementos del carrusel de thumbnails
      this.thumbCarousel = this.modal.querySelector('.lightbox-thumbnails-carousel');
      this.thumbPrevBtn = this.modal.querySelector('.thumb-carousel-prev');
      this.thumbNextBtn = this.modal.querySelector('.thumb-carousel-next');
      
      console.log('✅ Elementos del lightbox responsivo inicializados');
    }
    
    bindEvents() {
      if (!this.modal) return;
      
      // Cerrar modal
      this.closeBtn?.addEventListener('click', () => this.close());
      
      // Navegación principal
      this.prevBtn?.addEventListener('click', () => this.navigateImage(-1));
      this.nextBtn?.addEventListener('click', () => this.navigateImage(1));
      
      // Navegación del carrusel de thumbnails
      this.thumbPrevBtn?.addEventListener('click', () => this.navigateThumbnailCarousel(-1));
      this.thumbNextBtn?.addEventListener('click', () => this.navigateThumbnailCarousel(1));
      
      // Click fuera del modal
      this.modal.addEventListener('click', (e) => {
        if (e.target === this.modal) this.close();
      });
      
      // Teclado
      document.addEventListener('keydown', (e) => this.handleKeyboard(e));
      
      // Responsive
      window.addEventListener('resize', () => this.handleResize());
      
      // Botón reserva
      this.reservaLink?.addEventListener('click', (e) => {
        e.preventDefault();
        this.close();
        this.dispatchEstudioSeleccionado();
        setTimeout(() => this.scrollToReservas(), 200);
      });
    }
    
    // ===== FUNCIONES PRINCIPALES =====
    
    open(estudioId, imageIndex = 0) {
      console.log('🎯 Abriendo lightbox responsivo:', { estudioId, imageIndex });
      
      const estudioData = this.lightboxData[estudioId];
      if (!estudioData) {
        console.error('❌ Estudio no encontrado:', estudioId);
        return;
      }
      
      this.currentEstudioId = estudioId;
      this.currentImages = this.buildImageArray(estudioData);
      this.currentImageIndex = Math.max(0, Math.min(imageIndex, this.currentImages.length - 1));
      this.thumbCarouselIndex = 0;
      
      // Actualizar título
      if (this.title) this.title.textContent = estudioData.nombre;
      
      // Actualizar enlaces
      if (this.detailsLink) this.detailsLink.href = `/estudio/${estudioId}`;
      if (this.reservaLink) this.reservaLink.href = '#reservas';
      
      // Construir thumbnails
      this.buildThumbnails();
      
      // Actualizar imagen y mostrar modal
      this.updateImage();
      this.show();
      
      console.log('✅ Lightbox responsivo abierto con', this.currentImages.length, 'imágenes');
    }
    
    close() {
      this.modal?.classList.add('hidden');
      this.modal?.classList.remove('flex');
      document.body.style.overflow = '';
      releaseFocusTrap();
      console.log('🚪 Lightbox responsivo cerrado');
    }
    
    show() {
      this.modal?.classList.remove('hidden');
      this.modal?.classList.add('flex');
      document.body.style.overflow = 'hidden';
      
      // Focus management
      trapFocus(this.modal);
      if (!getAccessibilityManager()) {
        setTimeout(() => this.closeBtn?.focus(), 100);
      }
    }
    
    navigateImage(direction) {
      if (this.currentImages.length === 0) return;
      
      this.currentImageIndex = (this.currentImageIndex + direction + this.currentImages.length) % this.currentImages.length;
      this.updateImage();
      this.ensureThumbnailVisible();
    }
    
    navigateThumbnailCarousel(direction) {
      const maxIndex = Math.max(0, this.currentImages.length - this.thumbnailsPerView);
      
      if (direction === -1) {
        this.thumbCarouselIndex = Math.max(0, this.thumbCarouselIndex - 1);
      } else {
        this.thumbCarouselIndex = Math.min(maxIndex, this.thumbCarouselIndex + 1);
      }
      
      this.updateThumbnailCarousel();
    }
    
    // ===== FUNCIONES DE CONSTRUCCIÓN =====
    
    buildImageArray(estudioData) {
      const images = [];
      
      // Imagen principal
      if (estudioData.imagenPrincipal) {
        images.push({
          src: estudioData.imagenPrincipal,
          alt: `${estudioData.nombre} - Imagen principal`
        });
      }
      
      // Galería adicional
      if (estudioData.imagenes && Array.isArray(estudioData.imagenes)) {
        estudioData.imagenes.forEach((src, index) => {
          images.push({
            src: src,
            alt: `${estudioData.nombre} - Imagen ${index + 1}`
          });
        });
      }
      
      return images;
    }
    
    buildThumbnails() {
      if (!this.thumbCarousel) return;
      
      this.thumbCarousel.innerHTML = '';
      
      this.currentImages.forEach((image, index) => {
        const thumb = document.createElement('button');
        thumb.className = `lightbox-thumbnail mr-2 last:mr-0 rounded-md overflow-hidden border-2 border-transparent hover:border-white focus:border-yellow-400 transition-all duration-200`;
        thumb.setAttribute('aria-label', `Ver ${image.alt}`);
        thumb.setAttribute('data-index', index.toString());
        
        thumb.innerHTML = `
          <img 
            src="${image.src}" 
            alt="" 
            class="w-full h-full object-cover"
            loading="lazy"
          />
        `;
        
        thumb.addEventListener('click', () => {
          this.currentImageIndex = index;
          this.updateImage();
        });
        
        this.thumbCarousel.appendChild(thumb);
      });
      
      // Actualizar responsive
      this.updateThumbnailSizes();
      this.updateThumbnailCarousel();
    }
    
    updateThumbnailSizes() {
      if (!this.thumbCarousel) return;
      
      const thumbnails = this.thumbCarousel.querySelectorAll('.lightbox-thumbnail');
      const gap = 0.5; // rem
      const totalGaps = (this.thumbnailsPerView - 1) * gap;
      const thumbnailWidth = `calc((100% - ${totalGaps}rem) / ${this.thumbnailsPerView})`;
      
      thumbnails.forEach(thumb => {
        thumb.style.width = thumbnailWidth;
        thumb.style.aspectRatio = '1';
        thumb.style.flexShrink = '0';
      });
    }
    
    // ===== FUNCIONES DE ACTUALIZACIÓN =====
    
    updateImage() {
      if (!this.image || this.currentImages.length === 0) return;
      
      const currentImage = this.currentImages[this.currentImageIndex];
      
      // Transición suave
      this.image.style.opacity = '0.7';
      
      setTimeout(() => {
        this.image.src = currentImage.src;
        this.image.alt = currentImage.alt;
        this.image.style.opacity = '1';
      }, 150);
      
      // Actualizar contador
      if (this.currentSpan) this.currentSpan.textContent = (this.currentImageIndex + 1).toString();
      if (this.totalSpan) this.totalSpan.textContent = this.currentImages.length.toString();
      
      // Actualizar botones de navegación
      this.updateNavigationButtons();
      
      // Actualizar thumbnails activas
      this.updateActiveThumbnail();
    }
    
    updateNavigationButtons() {
      if (this.prevBtn) {
        this.prevBtn.disabled = this.currentImageIndex === 0;
        this.prevBtn.style.opacity = this.currentImageIndex === 0 ? '0.5' : '1';
      }
      
      if (this.nextBtn) {
        this.nextBtn.disabled = this.currentImageIndex === this.currentImages.length - 1;
        this.nextBtn.style.opacity = this.currentImageIndex === this.currentImages.length - 1 ? '0.5' : '1';
      }
    }
    
    updateActiveThumbnail() {
      if (!this.thumbCarousel) return;
      
      const thumbnails = this.thumbCarousel.querySelectorAll('.lightbox-thumbnail');
      thumbnails.forEach((thumb, index) => {
        const isActive = index === this.currentImageIndex;
        thumb.style.opacity = isActive ? '1' : '0.7';
        thumb.style.borderColor = isActive ? '#ffffff' : 'transparent';
      });
    }
    
    updateThumbnailCarousel() {
      if (!this.thumbCarousel) return;
      
      const translateX = -(this.thumbCarouselIndex * (100 / this.thumbnailsPerView));
      this.thumbCarousel.style.transform = `translateX(${translateX}%)`;
      
      // Actualizar botones del carrusel
      this.updateThumbnailCarouselButtons();
    }
    
    updateThumbnailCarouselButtons() {
      const maxIndex = Math.max(0, this.currentImages.length - this.thumbnailsPerView);
      
      if (this.thumbPrevBtn) {
        this.thumbPrevBtn.style.opacity = this.thumbCarouselIndex === 0 ? '0.5' : '1';
        this.thumbPrevBtn.disabled = this.thumbCarouselIndex === 0;
      }
      
      if (this.thumbNextBtn) {
        this.thumbNextBtn.style.opacity = this.thumbCarouselIndex >= maxIndex ? '0.5' : '1';
        this.thumbNextBtn.disabled = this.thumbCarouselIndex >= maxIndex;
      }
    }
    
    ensureThumbnailVisible() {
      const currentThumbIndex = this.currentImageIndex;
      const visibleStart = this.thumbCarouselIndex;
      const visibleEnd = this.thumbCarouselIndex + this.thumbnailsPerView - 1;
      
      if (currentThumbIndex < visibleStart) {
        this.thumbCarouselIndex = currentThumbIndex;
        this.updateThumbnailCarousel();
      } else if (currentThumbIndex > visibleEnd) {
        this.thumbCarouselIndex = Math.max(0, currentThumbIndex - this.thumbnailsPerView + 1);
        this.updateThumbnailCarousel();
      }
    }
    
    // ===== EVENTOS =====
    
    handleKeyboard(e) {
      if (this.modal?.classList.contains('hidden')) return;
      
      switch (e.key) {
        case 'Escape':
          this.close();
          break;
        case 'ArrowLeft':
          this.navigateImage(-1);
          break;
        case 'ArrowRight':
          this.navigateImage(1);
          break;
      }
    }
    
    handleResize() {
      const newThumbnailsPerView = getThumbnailsPerView();
      if (newThumbnailsPerView !== this.thumbnailsPerView) {
        this.thumbnailsPerView = newThumbnailsPerView;
        this.updateThumbnailSizes();
        this.thumbCarouselIndex = 0; // Reset position
        this.updateThumbnailCarousel();
      }
    }
    
    // ===== INTEGRACIÓN CON RESERVAS =====
    
    dispatchEstudioSeleccionado() {
      const estudioData = this.lightboxData[this.currentEstudioId];
      dispatchEstudioSeleccionado(
        this.currentEstudioId,
        estudioData ? estudioData.nombre : 'Estudio seleccionado'
      );
      
      console.log('📤 Evento estudioSeleccionado enviado:', {
        estudioId: this.currentEstudioId,
        estudioNombre: estudioData?.nombre
      });
    }
    
    scrollToReservas() {
      const reservasSection = document.querySelector('#reservas');
      if (reservasSection) {
        reservasSection.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
        console.log('⬇️ Scroll a reservas completado');
      }
    }
  }
  
  // ===== INICIALIZAR LIGHTBOX RESPONSIVO =====
  const lightboxInstance = new ResponsiveLightbox('espacios-lightbox', window.lightboxData);
  
  // Función global para abrir lightbox
  window.openLightbox = function(estudioId, imageIndex = 0) {
    lightboxInstance.open(estudioId, imageIndex);
  };
  
  // ===== EVENTOS PARA ABRIR LIGHTBOX =====
  
  // Botón galería
  document.querySelectorAll('.open-gallery-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const estudioId = btn.getAttribute('data-estudio-id');
      if (estudioId && window.openLightbox) {
        console.log("🎯 Abriendo galería:", estudioId);
        window.openLightbox(estudioId, 0);
      }
    });
  });

  // Thumbnails
  document.querySelectorAll('.gallery-thumb').forEach(thumb => {
    thumb.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      const estudioId = thumb.getAttribute('data-estudio-id');
      const imgIndex = parseInt(thumb.getAttribute('data-img-index') || '0');
      if (estudioId && window.openLightbox) {
        const lightboxIndex = imgIndex === -1 ? 0 : imgIndex + 1;
        console.log("🎯 Abriendo thumbnail:", { estudioId, imgIndex, lightboxIndex });
        window.openLightbox(estudioId, lightboxIndex);
      }
    });

    // Keyboard support for thumbnails
    thumb.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        thumb.click();
      }
    });
  });

  // Imagen principal
  document.querySelectorAll('.main-image').forEach(img => {
    img.addEventListener('click', (e) => {
      if (e.target !== img) return;
      const estudioId = img.getAttribute('data-estudio-id');
      if (estudioId && window.openLightbox) {
        console.log("🎯 Abriendo imagen principal:", estudioId);
        window.openLightbox(estudioId, 0);
      }
    });

    // Keyboard support for main image
    img.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        img.click();
      }
    });
  });

  console.log("✅ Espacios con lightbox responsivo inicializado completamente");
  console.log(`📱 Configuración: ${getThumbnailsPerView()} thumbnails por vista`);
  
  // Debug
  window.espaciosDebug = {
    openLightbox: window.openLightbox,
    lightboxData: window.lightboxData,
    currentIndex: () => currentIndex,
    isMobile: isMobile,
    updateCarousel,
    getThumbnailsPerView
  };
});
</script>

<style>
  /* Screen reader only utility */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Enhanced focus styles for keyboard navigation */
  .keyboard-navigation button:focus,
  .keyboard-navigation [role="button"]:focus {
    outline: 2px solid #ffd700;
    outline-offset: 2px;
    box-shadow: 0 0 0 4px rgba(255, 215, 0, 0.3);
  }

  /* Gallery thumbnail focus */
  .keyboard-navigation .gallery-thumb:focus {
    transform: scale(1.15);
    z-index: 10;
    position: relative;
  }

  /* Carousel indicator focus */
  .keyboard-navigation [data-index]:focus {
    transform: scale(1.3);
    z-index: 10;
  }

  /* Lightbox focus styles */
  .lightbox-modal.flex .keyboard-navigation button:focus {
    box-shadow: 0 0 0 3px rgba(255, 215, 0, 0.8);
  }

  /* NUEVA ESTRUCTURA DE RESPONSIVE NAVIGATION */
  
  /* Botones de navegación solo en móvil */
  @media (min-width: 768px) {
    #prev-btn,
    #next-btn {
      display: none !important;
    }
  }

  /* Mejorar área de toque en móvil */
  #prev-btn,
  #next-btn {
    min-width: 44px;
    min-height: 44px;
    -webkit-tap-highlight-color: transparent;
  }

  /* Carrusel responsivo sin cortes */
  #carousel-slides {
    will-change: transform;
  }

  /* Espaciado negativo para compensar padding */
  #carousel-slides.-mx-2 {
    margin-left: -0.5rem;
    margin-right: -0.5rem;
  }

  /* Estilos para el carrusel de thumbnails en el lightbox */
  .lightbox-thumbnails-carousel {
    will-change: transform;
  }
  
  /* Asegurar que las thumbnails no se deformen */
  .lightbox-thumbnail {
    aspect-ratio: 1;
    flex-shrink: 0;
  }
  
  /* Responsive design para thumbnails del lightbox */
  @media (max-width: 640px) {
    .lightbox-thumbnail {
      width: calc((100% - 2rem) / 5); /* 5 thumbnails en móvil con gaps */
    }
  }
  
  @media (min-width: 641px) and (max-width: 1024px) {
    .lightbox-thumbnail {
      width: calc((100% - 3rem) / 6); /* 6 thumbnails en tablet */
    }
  }
  
  @media (min-width: 1025px) {
    .lightbox-thumbnail {
      width: calc((100% - 4rem) / 8); /* 8 thumbnails en desktop */
    }
  }

  /* Improved hover effects for accessibility */
  @media (hover: hover) {
    .gallery-thumb:hover,
    .open-gallery-btn:hover {
      transform: scale(1.05);
    }
    
    .main-image:hover {
      opacity: 0.9;
    }

    /* Hover en botones de navegación solo en móvil */
    @media (max-width: 767px) {
      #prev-btn:hover,
      #next-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }
    }
    
    /* Hover effects para lightbox thumbnails */
    .lightbox-thumbnail:hover {
      opacity: 1 !important;
      transform: scale(1.05);
    }
  }

  /* Focus states para lightbox */
  .lightbox-thumbnail:focus {
    outline: 2px solid #ffd700;
    outline-offset: 2px;
    opacity: 1 !important;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .gallery-thumb,
    .open-gallery-btn,
    #prev-btn,
    #next-btn,
    .lightbox-thumbnail {
      border: 2px solid;
    }
    
    .carousel-indicator {
      border: 2px solid;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .gallery-thumb,
    .open-gallery-btn,
    .main-image,
    #carousel-slides,
    #prev-btn,
    #next-btn,
    .lightbox-thumbnails-carousel,
    .lightbox-thumbnail {
      transition: none !important;
    }
    
    .hover\:scale-110:hover,
    .focus\:scale-110:focus,
    .lightbox-thumbnail:hover {
      transform: none !important;
    }
  }

  /* Asegurar que el carrusel no se desborde */
  #carousel-container {
    contain: layout;
  }

  /* Prevenir scroll horizontal no deseado */
  .bg-pixel-blue {
    overflow-x: hidden;
  }
</style>