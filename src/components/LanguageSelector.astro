---
// @ts-nocheck
import { getLanguageFromUrl, getAlternateUrls, getLanguageNativeName } from '../i18n/utils/translator';

const languages = ['es', 'en', 'zh']; // ‚Üê ACTUALIZADO PARA 3 IDIOMAS
const currentPath = Astro.url.pathname;
const currentLang = getLanguageFromUrl(currentPath);
const alternateUrls = getAlternateUrls(currentPath);

// Helper para acceso seguro a URLs
function getUrlForLang(lang) {
  switch(lang) {
    case 'es': return alternateUrls.es;
    case 'en': return alternateUrls.en;
    case 'zh': return alternateUrls.zh;
    default: return alternateUrls.es;
  }
}

// Helper para obtener nombres nativos
function getDisplayName(lang) {
  switch(lang) {
    case 'es': return 'Espa√±ol';
    case 'en': return 'English';
    case 'zh': return '‰∏≠Êñá';
    default: return 'Espa√±ol';
  }
}

// Helper para obtener banderas/√≠conos
function getLanguageIcon(lang) {
  switch(lang) {
    case 'es': return 'üá®üá¥';
    case 'en': return 'üá∫üá∏';
    case 'zh': return 'üá®üá≥';
    default: return 'üåç';
  }
}
---

<nav lang={currentLang} aria-label="Selector de idioma" class="relative">
  <!-- Desktop Version -->
  <div class="hidden md:inline-flex overflow-hidden rounded-lg border border-white/20 bg-white/10 backdrop-blur-sm">
    {languages.map((lang) => (
      <a
        href={getUrlForLang(lang)}
        data-lang={lang}
        class={`flex items-center gap-2 px-3 py-2 text-sm font-medium transition ${
          currentLang === lang
            ? 'bg-white/20 text-white font-semibold'
            : 'text-white/80 hover:bg-white/10 hover:text-white'
        }`}
        aria-current={currentLang === lang ? 'page' : undefined}
        title={`Cambiar a ${getDisplayName(lang)}`}
      >
        <span class="text-xs">{getLanguageIcon(lang)}</span>
        <span>{lang.toUpperCase()}</span>
        {currentLang === lang && (
          <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-pixel-green" fill="none"
               viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round"
                  d="M4.5 12.75l6 6 9-13.5" />
          </svg>
        )}
      </a>
    ))}
  </div>

  <!-- Mobile Version -->
  <details class="md:hidden group relative">
    <summary class="flex items-center gap-2 px-3 py-2 rounded-lg border border-white/20 bg-black/80 text-white/90 cursor-pointer list-none hover:bg-white/10 transition">
      <!-- Globo -->
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round"
              d="M12 21a9 9 0 100-18 9 9 0 000 18zM8.25 9.75h7.5m-7.5 3h7.5" />
      </svg>
      
      <!-- Bandera + C√≥digo del idioma actual -->
      <span class="text-xs">{getLanguageIcon(currentLang)}</span>
      <span class="text-sm font-semibold">{currentLang.toUpperCase()}</span>
      
      <!-- Chevron -->
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transition-transform group-open:rotate-180"
           fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round"
              d="m19.5 8.25-7.5 7.5-7.5-7.5" />
      </svg>
    </summary>

    <!-- Dropdown con 3 opciones -->
    <ul class="absolute right-0 mt-2 w-44 rounded-lg border border-white/20 bg-black/85 backdrop-blur-sm shadow-xl z-50 text-white/90 overflow-hidden">
      {languages.map((lang) => (
        <li>
          <a
            href={getUrlForLang(lang)}
            data-lang={lang}
            class={`flex items-center justify-between px-4 py-3 text-sm transition hover:bg-white/10 ${
              currentLang === lang ? 'bg-gray-700/60 font-semibold' : ''
            }`}
          >
            <div class="flex items-center gap-3">
              <span class="text-base">{getLanguageIcon(lang)}</span>
              <span>{getDisplayName(lang)}</span>
            </div>
            {currentLang === lang && (
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-pixel-green" fill="none"
                   viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round"
                      d="M4.5 12.75l6 6 9-13.5" />
              </svg>
            )}
          </a>
        </li>
      ))}
    </ul>
  </details>
</nav>

<style is:global>
  /* Animaci√≥n para cambio de idioma */
  @keyframes lang-switch { 
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); } 
  }
  
  nav[aria-label="Selector de idioma"].animate { 
    animation: lang-switch 0.3s ease; 
  }

  /* Ocultar marcador de lista en summary */
  summary::-webkit-details-marker {
    display: none;
  }
  
  summary::marker {
    display: none;
  }
  
  /* Mejorar hover en mobile */
  @media (hover: hover) {
    details summary:hover {
      background: rgba(255, 255, 255, 0.15);
    }
  }
  
  /* Asegurar que el dropdown est√© encima de todo */
  details[open] ul {
    z-index: 9999;
  }
  
  /* Smooth transition para el chevron */
  details summary svg:last-child {
    transition: transform 0.2s ease;
  }
  
  /* Focus states mejorados */
  details summary:focus-visible {
    outline: 2px solid #ffd700;
    outline-offset: 2px;
  }
  
  nav a:focus-visible {
    outline: 2px solid #ffd700;
    outline-offset: 2px;
  }

  /* Mejoras visuales para mobile dropdown */
  details[open] ul li:first-child a {
    border-top-left-radius: 0.5rem;
    border-top-right-radius: 0.5rem;
  }
  
  details[open] ul li:last-child a {
    border-bottom-left-radius: 0.5rem;
    border-bottom-right-radius: 0.5rem;
  }
  
  /* Separadores sutiles entre opciones */
  details[open] ul li:not(:last-child) {
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
</style>

<script>
  // @ts-nocheck
  // Seleccionar el navegador de idioma
  const selector = document.querySelector('nav[aria-label="Selector de idioma"]');

  // Funci√≥n para cambiar idioma con animaci√≥n
  function changeLang(url, lang) {
    // Validar par√°metros
    if (!url || !lang) {
      console.warn('‚ö†Ô∏è URL o idioma faltante');
      return;
    }
    
    console.log('üåê Cambiando idioma a:', lang);
    
    try { 
      localStorage.setItem('pixel_language_preference', lang); 
      console.log('üíæ Preferencia guardada:', lang);
    } catch (error) {
      console.warn('‚ö†Ô∏è Error guardando preferencia:', error);
    }
    
    // A√±adir animaci√≥n
    if (selector) {
      selector.classList.add('animate');
    }
    
    // Redirigir despu√©s de la animaci√≥n
    setTimeout(function() { 
      window.location.href = url; 
    }, 200);
  }

  // Helper para verificar si un elemento tiene el m√©todo closest
  function findLanguageLink(element) {
    // Verificar que el elemento tenga el m√©todo closest
    if (!element || typeof element.closest !== 'function') {
      return null;
    }
    return element.closest('[data-lang]');
  }

  // Manejar clicks en enlaces de idioma
  document.addEventListener('click', function(e) {
    const target = e.target;
    if (!target) return;
    
    // Buscar el enlace m√°s cercano con data-lang
    const link = findLanguageLink(target);
    if (!link) return;
    
    // Prevenir navegaci√≥n normal
    e.preventDefault();
    
    const lang = link.getAttribute('data-lang');
    const href = link.getAttribute('href');
    
    if (lang && href) {
      console.log('üîó Click en idioma:', lang, 'URL:', href);
      changeLang(href, lang);
    }
  });

  // Cerrar dropdown mobile en cambio de tama√±o
  window.addEventListener('resize', function() {
    if (!selector) return;
    
    const details = selector.querySelector('details');
    if (window.innerWidth >= 768 && details && details.open) {
      details.open = false;
      console.log('üì± Cerrando dropdown por cambio a desktop');
    }
  });

  // Atajo de teclado actualizado para 3 idiomas (Alt + L)
  document.addEventListener('keydown', function(e) {
    if (e.altKey && e.key.toLowerCase() === 'l') {
      e.preventDefault();
      
      if (!selector) return;
      
      const currentLang = selector.getAttribute('lang');
      // Rotaci√≥n: es ‚Üí en ‚Üí zh ‚Üí es
      const nextLang = currentLang === 'es' ? 'en' : currentLang === 'en' ? 'zh' : 'es';
      const link = selector.querySelector('[data-lang="' + nextLang + '"]');
      
      if (link) {
        const href = link.getAttribute('href');
        if (href) {
          console.log('‚å®Ô∏è Atajo de teclado - cambiando a:', nextLang);
          changeLang(href, nextLang);
        }
      }
    }
  });

  // Cerrar dropdown al hacer click fuera (para mobile)
  document.addEventListener('click', function(e) {
    if (!selector) return;
    
    const details = selector.querySelector('details');
    if (!details || !details.open) return;
    
    // Verificar que e.target es un Node antes de usar contains
    const target = e.target;
    if (target && selector.contains && typeof selector.contains === 'function') {
      // Si el click no fue dentro del selector, cerrar dropdown
      if (!selector.contains(target)) {
        details.open = false;
        console.log('üì± Cerrando dropdown por click fuera');
      }
    }
  });

  console.log('‚úÖ Language Selector (3 idiomas): Inicializado correctamente');
</script>