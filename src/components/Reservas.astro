---
// IMPORTAR I18N - SOLO ESTO AÑADIDO
import { getLanguageFromUrl, t, setCurrentLanguage } from '../i18n/utils/translator';

// Detectar idioma actual - SOLO ESTO AÑADIDO
const currentLang = getLanguageFromUrl(Astro.url.pathname);
setCurrentLanguage(currentLang);
---

<section id="reservas" class="section bg-pixel-brown/10">
    <div class="container">
      <h2 class="section-title text-4xl md:text-6xl  text-pixel-brown">{t('reservas.title')}</h2>
      
      <div class="max-w-6xl mx-auto bg-gray-50 rounded-lg shadow-lg overflow-hidden">
        <div class="md:flex">
          <div class="md:w-1/2 p-8">
            <h3 class="text-2xl font-bold mb-4">{t('reservas.subtitle')}</h3>
            <div class="mb-6">
              <p class="text-lg font-semibold text-pixel-brown">
                {t('reservas.description')}
              </p>
              <p class="text-green-600 font-bold text-lg">
                {t('reservas.response_time')}
              </p>
            </div>
            
            <!-- Contenedor para mensajes dinámicos -->
            <div id="message-container" class="hidden mb-4"></div>
            
            <form id="reservaForm" class="space-y-6" data-bypass-intercept="true">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">
                    {t('reservas.form.name')} *
                  </label>
                  <input 
                    type="text" 
                    id="nombre" 
                    name="nombre" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                    placeholder={t('reservas.form.name_placeholder')}
                    autocomplete="name"
                    required
                  >
                  <div id="nombre-error" class="hidden text-red-600 text-sm mt-1"></div>
                </div>
                
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
                    {t('reservas.form.email')} *
                  </label>
                  <input 
                    type="email" 
                    id="email" 
                    name="email" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                    placeholder={t('reservas.form.email_placeholder')}
                    autocomplete="email"
                    required
                  >
                  <div id="email-error" class="hidden text-red-600 text-sm mt-1"></div>
                </div>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="telefono" class="block text-sm font-medium text-gray-700 mb-1">
                    {t('reservas.form.phone')} *
                  </label>
                  <input 
                    type="tel" 
                    id="telefono" 
                    name="telefono" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                    placeholder={t('reservas.form.phone_placeholder')}
                    autocomplete="tel"
                    required
                  >
                  <div id="telefono-error" class="hidden text-red-600 text-sm mt-1"></div>
                </div>
                
                <div>
                  <label for="duracion" class="block text-sm font-medium text-gray-700 mb-1">
                    {t('reservas.form.duration')} *
                  </label>
                  <select 
                    id="duracion" 
                    name="duracion" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                    required
                  >
                    <option value="">{t('reservas.form.duration_select')}</option>
                    <option value="1-mes-3100000">{t('reservas.form.duration_options.1_month_price')}</option>
                    <option value="3-meses-2950000">{t('reservas.form.duration_options.3_months_price')}</option>
                    <option value="6-meses-2750000">{t('reservas.form.duration_options.6_months_price')}</option>
                    <option value="12-meses-2650000">{t('reservas.form.duration_options.12_months_price')}</option>
                  </select>
                  <div id="duracion-error" class="hidden text-red-600 text-sm mt-1"></div>
                </div>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="fecha" class="block text-sm font-medium text-gray-700 mb-1">
                    {t('reservas.form.date')}
                  </label>
                  <input 
                    type="date" 
                    id="fecha" 
                    name="fecha" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                    required
                  >
                  <small class="text-gray-500 text-xs">{t('reservas.form.date_help')}</small>
                  <div id="fecha-error" class="hidden text-red-600 text-sm mt-1"></div>
                </div>
                
                <div>
                  <label for="personas" class="block text-sm font-medium text-gray-700 mb-1">
                    {t('reservas.form.people')}
                  </label>
                  <select 
                    id="personas" 
                    name="personas" 
                    class="w-full px-4 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                    required
                  >
                    <option value="1">{t('reservas.form.people_options.1_person')}</option>
                    <option value="2">{t('reservas.form.people_options.2_people')}</option>
                  </select>
                  <div id="personas-error" class="hidden text-red-600 text-sm mt-1"></div>
                </div>
              </div>

              <div>
                <label for="como_conociste" class="block text-sm font-medium text-gray-700 mb-1">
                  {t('reservas.form.referral')}
                </label>
                <select 
                  id="como_conociste" 
                  name="como_conociste" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white"
                >
                  <option value="">{t('reservas.form.referral_select')}</option>
                  <option value="google">{t('reservas.form.referral_options.google')}</option>
                  <option value="instagram">{t('reservas.form.referral_options.instagram')}</option>
                  <option value="facebook">{t('reservas.form.referral_options.facebook')}</option>
                  <option value="linkedin">{t('reservas.form.referral_options.linkedin')}</option>
                  <option value="recomendacion">{t('reservas.form.referral_options.friend')}</option>
                  <option value="volante">{t('reservas.form.referral_options.flyer')}</option>
                  <option value="otro">{t('reservas.form.referral_options.other')}</option>
                </select>
              </div>
              
              <div>
                <label for="mensaje" class="block text-sm font-medium text-gray-700 mb-1">
                  {t('reservas.form.message')}
                </label>
                <textarea 
                  id="mensaje" 
                  name="mensaje" 
                  rows="3" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-pixel-brown focus:border-transparent bg-white" 
                  placeholder={t('reservas.form.message_placeholder')}
                ></textarea>
                <div id="contador-caracteres" class="mt-1 text-xs text-gray-500">0/500 {t('reservas.form.characters')}</div>
              </div>

              <div>
                <label class="flex items-start gap-3">
                  <input 
                    type="checkbox" 
                    name="acepta_contacto" 
                    class="mt-1 w-4 h-4 text-pixel-brown focus:ring-pixel-brown border-gray-300 rounded"
                    required
                  >
                  <span class="text-sm text-gray-700">
                    {t('reservas.form.accept_contact')}
                    <a href="/privacidad" class="text-pixel-brown hover:underline">{t('reservas.form.privacy_policy')}</a>
                  </span>
                </label>
              </div>
              <div style="position: absolute; left: -9999px; visibility: hidden;" aria-hidden="true">
                <input type="text" name="website_url" id="website_url" value="" 
                      tabindex="-1" autocomplete="nope" />
              </div>
              
              <!-- BOTÓN DE SUBMIT QUE FALTABA -->
              <div class="text-center">
                <button 
                  type="submit" 
                  class="w-full bg-pixel-brown text-white px-8 py-4 rounded-md hover:bg-pixel-brown/90 transition-colors font-semibold text-lg"
                >
                  {t('reservas.form.submit')}
                </button>
              </div>

              <p class="text-center text-sm text-gray-500">
                {t('reservas.form.footer_note')}
              </p>
            </form>

            <!-- WhatsApp alternativo -->
            <div class="mt-6 text-center">
              <p class="text-sm text-gray-500 mb-3">{t('reservas.whatsapp.question')}</p>
              <a href={`https://wa.me/573195895858?text=${encodeURIComponent(t('reservas.whatsapp.message'))}`} target="_blank" class="inline-flex items-center text-green-600 font-medium hover:underline">
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-5 h-5 mr-2" viewBox="0 0 16 16">
                  <path d="M13.601 2.326A7.854 7.854 0 0 0 7.994 0C3.627 0 .068 3.558.064 7.926c0 1.399.366 2.76 1.057 3.965L0 16l4.204-1.102a7.933 7.933 0 0 0 3.79.965h.004c4.368 0 7.926-3.558 7.93-7.93A7.898 7.898 0 0 0 13.6 2.326zM7.994 14.521a6.573 6.573 0 0 1-3.356-.92l-.24-.144-2.494.654.666-2.433-.156-.251a6.56 6.56 0 0 1-1.007-3.505c0-3.626 2.957-6.584 6.591-6.584a6.56 6.56 0 0 1 4.66 1.931 6.557 6.557 0 0 1 1.928 4.66c-.004 3.639-2.961 6.592-6.592 6.592zm3.615-4.934c-.197-.099-1.17-.578-1.353-.646-.182-.065-.315-.099-.445.099-.133.197-.513.646-.627.775-.114.133-.232.148-.43.05-.197-.1-.836-.308-1.592-.985-.59-.525-.985-1.175-1.103-1.372-.114-.198-.011-.304.088-.403.087-.088.197-.232.296-.346.1-.114.133-.198.198-.33.065-.134.034-.248-.015-.347-.05-.099-.445-1.076-.612-1.47-.16-.389-.323-.335-.445-.34-.114-.007-.247-.007-.38-.007a.729.729 0 0 0-.529.247c-.182.198-.691.677-.691 1.654 0 .977.71 1.916.81 2.049.098.133 1.394 2.132 3.383 2.992.47.205.84.326 1.129.418.475.152.904.129 1.246.08.38-.058 1.171-.48 1.338-.943.164-.464.164-.86.114-.943-.049-.084-.182-.133-.38-.232z"/>
                </svg>
                {t('reservas.whatsapp.cta')}
              </a>
            </div>
          </div>
          
          <div class="md:w-1/2 bg-pixel-brown/20 p-8 flex flex-col justify-center">
            <div class="text-center">
              <h3 class="text-2xl font-bold mb-4">{t('reservas.benefits.title')}</h3>
              
              <ul class="space-y-4 text-left">
                <li class="flex items-start">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-pixel-brown mr-2 flex-shrink-0">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span><strong>{t('reservas.benefits.no_guarantor_title')}:</strong> {t('reservas.benefits.no_guarantor_desc')}</span>
                </li>
                
                <li class="flex items-start">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-pixel-brown mr-2 flex-shrink-0">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span><strong>{t('reservas.benefits.all_included_title')}:</strong> {t('reservas.benefits.all_included_desc')}</span>
                </li>
                
                <li class="flex items-start">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-pixel-brown mr-2 flex-shrink-0">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span><strong>{t('reservas.benefits.quick_move_title')}:</strong> {t('reservas.benefits.quick_move_desc')}</span>
                </li>
                
                <li class="flex items-start">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-pixel-brown mr-2 flex-shrink-0">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span><strong>{t('reservas.benefits.flexibility_title')}:</strong> {t('reservas.benefits.flexibility_desc')}</span>
                </li>
                
                <li class="flex items-start">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 text-pixel-brown mr-2 flex-shrink-0">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span><strong>{t('reservas.benefits.location_title')}:</strong> {t('reservas.benefits.location_desc')}</span>
                </li>
              </ul>

              <!-- Testimonial -->
              <div class="mt-8 p-4 bg-white rounded-lg shadow-sm">
                <p class="text-sm text-gray-600 italic mb-2">
                  {t('reservas.testimonial.quote')}
                </p>
                <p class="text-xs text-pixel-brown font-semibold">{t('reservas.testimonial.author')}</p>
              </div>

              <!-- Datos de confianza -->
              <div class="mt-6 grid grid-cols-3 gap-4 text-center">
                <div class="bg-white rounded-lg p-3 shadow-sm">
                  <div class="text-2xl font-bold text-pixel-brown">24h</div>
                  <div class="text-xs text-gray-600">{t('reservas.trust.process')}</div>
                </div>
                <div class="bg-white rounded-lg p-3 shadow-sm">
                  <div class="text-2xl font-bold text-pixel-brown">29m²</div>
                  <div class="text-xs text-gray-600">{t('reservas.trust.size')}</div>
                </div>
                <div class="bg-white rounded-lg p-3 shadow-sm">
                  <div class="text-2xl font-bold text-pixel-brown">$720K</div>
                  <div class="text-xs text-gray-600">{t('reservas.trust.savings')}</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
</section>

<script>
// ===== FORMULARIO DE RESERVAS OPTIMIZADO =====
// Sin duplicaciones, honeypot mejorado, validaciones completas
// MANTENER TODO EL JAVASCRIPT ORIGINAL INTACTO

document.addEventListener('DOMContentLoaded', function() {
  
  
  // ===== CONFIGURACIÓN CENTRALIZADA =====
  const CONFIG = {
    EMAIL_DESTINO: 'comercialpixel98a@gmail.com', // ✅ EMAIL ÚNICO
    WHATSAPP_NUMERO: '573195895858',
    MAX_CARACTERES_MENSAJE: 500,
    TIEMPO_MINIMO_ENVIO: 3000, // 3 segundos anti-bot
    REDIRECT_DELAY: 2000
  };
  
  // ===== ELEMENTOS DEL DOM (UNA SOLA VEZ) =====
  const elementos = {
    form: document.getElementById('reservaForm') as HTMLFormElement,
    messageContainer: document.getElementById('message-container') as HTMLElement,
    contadorCaracteres: document.getElementById('contador-caracteres') as HTMLElement,
    mensajeField: document.getElementById('mensaje') as HTMLTextAreaElement,
    submitButton: null as HTMLButtonElement | null,
    // Campos del formulario
    campos: {
      nombre: document.getElementById('nombre') as HTMLInputElement,
      email: document.getElementById('email') as HTMLInputElement,
      telefono: document.getElementById('telefono') as HTMLInputElement,
      duracion: document.getElementById('duracion') as HTMLSelectElement,
      fecha: document.getElementById('fecha') as HTMLInputElement,
      personas: document.getElementById('personas') as HTMLSelectElement,
      como_conociste: document.getElementById('como_conociste') as HTMLSelectElement,
      mensaje: document.getElementById('mensaje') as HTMLTextAreaElement,
      honeypot: document.getElementById('website_url') as HTMLInputElement,
      acepta_contacto: document.querySelector('input[name="acepta_contacto"]') as HTMLInputElement
    }
  };
  
  // ===== VALIDAR ELEMENTOS CRÍTICOS =====
  if (!elementos.form || !elementos.messageContainer) {
    console.error('❌ Elementos críticos del formulario no encontrados');
    return;
  }
  
  elementos.submitButton = elementos.form.querySelector('button[type="submit"]') as HTMLButtonElement;
  const camposRequeridos = elementos.form.querySelectorAll('input[required], select[required]');
  
  // ===== INTERFACES PARA TYPE SAFETY =====
  interface DatosFormulario {
    nombre: string;
    email: string;
    telefono: string;
    duracion: string;
    fecha: string;
    personas: string;
    como_conociste: string;
    mensaje: string;
  }
  
  type TipoMensaje = 'success' | 'error' | 'loading';
  
  // ===== VALIDACIONES ANTI-SPAM MEJORADAS =====
  class ValidadorAntiSpam {
    private static tiempoInicioFormulario = Date.now();
    
    // 1. Validar honeypot
    static validarHoneypot(): boolean {
      const honeypotValue = elementos.campos.honeypot?.value?.trim() || '';
      
      if (honeypotValue !== '') {
        return false;
      }
      
      return true;
    }
    
    static validarTiempo(): boolean {
      const tiempoTranscurrido = Date.now() - this.tiempoInicioFormulario;
      
      if (tiempoTranscurrido < CONFIG.TIEMPO_MINIMO_ENVIO) {
        return false;
      }
      
      return true;
    }
    
    static validarPatrones(datos: DatosFormulario): boolean {
      const textoCompleto = `${datos.nombre} ${datos.email} ${datos.mensaje}`.toLowerCase();
      
      const patronesSpam: RegExp[] = [
        /\b(viagra|cialis|casino|loan|credit|bitcoin|crypto)\b/i,
        /\b(click here|visit now|buy now|limited time)\b/i,
        /http[s]?:\/\//i // 
      ];
      
      const emailInvalido = /[^\w\s@.-]/.test(datos.email);
      
      const esSpam = patronesSpam.some(patron => patron.test(textoCompleto)) || emailInvalido;
      
      if (esSpam) {
        return false;
      }
      
      return true;
    }
    
    static validarCompleto(datos: DatosFormulario): boolean {
      return (
        this.validarHoneypot() &&
        this.validarTiempo() &&
        this.validarPatrones(datos)
      );
    }
  }
  
  class MensajeManager {
    static mostrar(tipo: TipoMensaje, mensaje: string): void {
      if (!elementos.messageContainer) return;
      
      const iconos: Record<TipoMensaje, string> = {
        success: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>`,
        error: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
        </svg>`,
        loading: `<svg class="animate-spin h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>`
      };
      
      const colores: Record<TipoMensaje, string> = {
        success: 'bg-green-50 text-green-800 border-green-200',
        error: 'bg-red-50 text-red-800 border-red-200',
        loading: 'bg-blue-50 text-blue-800 border-blue-200'
      };
      
      elementos.messageContainer.innerHTML = `
        <div class="flex items-center gap-3 p-4 rounded-lg border ${colores[tipo]}">
          ${iconos[tipo]}
          <span>${mensaje}</span>
        </div>
      `;
      
      elementos.messageContainer.classList.remove('hidden');
      
      if (tipo === 'success') {
        setTimeout(() => {
          elementos.messageContainer.classList.add('hidden');
        }, 3000);
      }
    }
    
    static ocultar(): void {
      elementos.messageContainer?.classList.add('hidden');
    }
  }
  
  class ValidadorCampos {
    static validarNombre(valor: string): string | null {
      const nombre = valor.trim();
      if (nombre.length < 2) return 'El nombre debe tener al menos 2 caracteres';
      if (nombre.length > 50) return 'El nombre no puede exceder 50 caracteres';
      if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/.test(nombre)) return 'Solo se permiten letras y espacios';
      return null;
    }
    
    static validarEmail(valor: string): string | null {
      const email = valor.trim();
      if (!email) return 'El email es obligatorio';
      if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) return 'Email inválido';
      return null;
    }
    
    static validarTelefono(valor: string): string | null {
      const telefono = valor.trim();
      if (!telefono) return 'El teléfono es obligatorio';
      if (!/^[0-9+\-\s()]+$/.test(telefono)) return 'Solo números y caracteres de teléfono';
      if (telefono.replace(/\D/g, '').length < 7) return 'Mínimo 7 dígitos';
      return null;
    }
    
    static validarFecha(valor: string): string | null {
      if (!valor) return 'Por favor selecciona una fecha';
      const fecha = new Date(valor);
      const hoy = new Date();
      hoy.setHours(0, 0, 0, 0);
      if (fecha < hoy) return 'La fecha no puede ser en el pasado';
      return null;
    }
    
    static validarSelect(valor: string, nombre: string): string | null {
      if (!valor) return `Por favor selecciona ${nombre}`;
      return null;
    }
    
    static validarCampo(campo: HTMLInputElement | HTMLSelectElement): boolean {
      let error: string | null = null;
      
      switch (campo.id) {
        case 'nombre':
          error = this.validarNombre(campo.value);
          break;
        case 'email':
          error = this.validarEmail(campo.value);
          break;
        case 'telefono':
          error = this.validarTelefono(campo.value);
          break;
        case 'fecha':
          error = this.validarFecha(campo.value);
          break;
        case 'duracion':
          error = this.validarSelect(campo.value, 'la duración');
          break;
        case 'personas':
          error = this.validarSelect(campo.value, 'número de personas');
          break;
      }
      
      if (error) {
        this.mostrarError(campo, error);
        return false;
      } else {
        this.limpiarError(campo);
        return true;
      }
    }
    
    static mostrarError(campo: HTMLElement, mensaje: string): void {
      campo.classList.add('border-red-500');
      campo.classList.remove('border-gray-300');
      
      const errorDiv = document.getElementById(`${campo.id}-error`);
      if (errorDiv) {
        errorDiv.textContent = mensaje;
        errorDiv.classList.remove('hidden');
      }
    }
    
    static limpiarError(campo: HTMLElement): void {
      campo.classList.remove('border-red-500');
      campo.classList.add('border-gray-300');
      
      const errorDiv = document.getElementById(`${campo.id}-error`);
      if (errorDiv) {
        errorDiv.classList.add('hidden');
      }
    }
  }
  
  // ===== ENVÍO DE FORMULARIO =====
  class EnviadorFormulario {
    static async enviarEmail(datos: DatosFormulario): Promise<void> {
      // ✅ VALIDACIÓN ANTI-SPAM COMPLETA
      if (!ValidadorAntiSpam.validarCompleto(datos)) {
        // Mostrar mensaje falso para confundir spam
        MensajeManager.mostrar('success', '¡Solicitud enviada! Te contactaremos pronto.');
        
        // Pequeño delay para parecer real
        await new Promise(resolve => setTimeout(resolve, 1500));
        return;
      }
      
      // ✅ PREPARAR DATOS PARA FORMSUBMIT (UNA SOLA VEZ)
      const formData = new FormData();
      
      // Datos del formulario
      formData.append('Nombre_Completo', datos.nombre);
      formData.append('Email_Contacto', datos.email);
      formData.append('Teléfono', datos.telefono);
      formData.append('Duración_Solicitada', datos.duracion);
      formData.append('Fecha_de_Ingreso', datos.fecha || 'Por coordinar');
      formData.append('Número_de_Personas', datos.personas);
      formData.append('Conoció_Pixel_por', datos.como_conociste || 'No especificado');
      formData.append('Mensaje_Adicional', datos.mensaje || 'Ninguno');
      formData.append('Fecha_Envío', new Date().toLocaleString('es-CO'));
      formData.append('Origen_Formulario', 'Formulario_Reservas_Principal');
      
      // Configuración FormSubmit
      formData.append('_subject', `🏠 Nueva Reserva Pixel Living - ${datos.nombre}`);
      formData.append('_template', 'table');
      formData.append('_captcha', 'false');
      formData.append('_next', 'https://pixelliving.co/gracias');
      
      // ✅ ENVIAR A EMAIL ÚNICO
      const response = await fetch(`https://formsubmit.co/${CONFIG.EMAIL_DESTINO}`, {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
    }
    
    static crearMensajeWhatsApp(datos: DatosFormulario): string {
      return `🏠 *SOLICITUD RESERVA PIXEL LIVING*

👤 *DATOS PERSONALES:*
- Nombre: ${datos.nombre}
- Email: ${datos.email}
- Teléfono: ${datos.telefono}

📅 *DETALLES DE LA RESERVA:*
- Duración solicitada: ${datos.duracion}
- Fecha de ingreso: ${datos.fecha || 'Por coordinar'}
- Número de personas: ${datos.personas}
- Conoció Pixel por: ${datos.como_conociste || 'No especificado'}

💬 *MENSAJE ADICIONAL:*
${datos.mensaje || 'Ninguno'}

---
📧 Email enviado exitosamente
⏰ ${new Date().toLocaleString('es-CO')}
🌐 pixelliving.co`;
    }
    
    // ✅ FUNCIÓN CONTROLADA PARA WHATSAPP - NO AUTOMÁTICA
    static abrirWhatsAppControlado(mensaje: string, esEmergencia: boolean = false): void {
      // Solo abrir si es emergencia O si el usuario confirma
      if (esEmergencia) {
        const whatsappURL = `https://wa.me/${CONFIG.WHATSAPP_NUMERO}?text=${encodeURIComponent(mensaje)}`;
        window.open(whatsappURL, '_blank');
      } else {
        // Para envíos normales, mostrar confirmación
        setTimeout(() => {
          if (confirm('¿Quieres abrir WhatsApp para continuar la conversación?')) {
            const whatsappURL = `https://wa.me/${CONFIG.WHATSAPP_NUMERO}?text=${encodeURIComponent(mensaje)}`;
            window.open(whatsappURL, '_blank');
          }
        }, 1000);
      }
    }
  }
  
  // ===== INICIALIZACIÓN DE EVENTOS =====
  
  // ✅ PREVENIR ENVÍOS ACCIDENTALES
  let formularioSubmitido = false;
  
  // Validación en tiempo real - SIN ENVÍO AUTOMÁTICO
  camposRequeridos.forEach(campo => {
    campo.addEventListener('blur', () => {
      ValidadorCampos.validarCampo(campo as HTMLInputElement | HTMLSelectElement);
    });
    
    campo.addEventListener('input', () => {
      if (campo.classList.contains('border-red-500')) {
        ValidadorCampos.limpiarError(campo as HTMLElement);
      }
    });
    
    // ✅ PREVENIR ENVÍO CON ENTER EN CAMPOS DE TEXTO
    campo.addEventListener('keydown', (e: Event) => {
      const keyboardEvent = e as KeyboardEvent;
      if (keyboardEvent.key === 'Enter' && campo.tagName !== 'TEXTAREA' && campo.tagName !== 'SELECT') {
        e.preventDefault();
      }
    });
  });
  
  // Contador de caracteres - SIN TRIGGERS AUTOMÁTICOS
  if (elementos.mensajeField && elementos.contadorCaracteres) {
    elementos.mensajeField.addEventListener('input', () => {
      const currentLength = elementos.mensajeField.value.length;
      const maxLength = CONFIG.MAX_CARACTERES_MENSAJE;
      
      elementos.contadorCaracteres.textContent = `${currentLength}/${maxLength} caracteres`;
      
      if (currentLength > maxLength * 0.9) {
        elementos.contadorCaracteres.classList.add('text-yellow-600');
        elementos.contadorCaracteres.classList.remove('text-gray-500');
      } else if (currentLength > maxLength) {
        elementos.contadorCaracteres.classList.add('text-red-600');
        elementos.contadorCaracteres.classList.remove('text-yellow-600', 'text-gray-500');
      } else {
        elementos.contadorCaracteres.classList.add('text-gray-500');
        elementos.contadorCaracteres.classList.remove('text-yellow-600', 'text-red-600');
      }
    });
  }
  
  // ===== ENVÍO DEL FORMULARIO - PROTEGIDO CONTRA MÚLTIPLES ENVÍOS =====
  elementos.form.addEventListener('submit', async function(e) {
    e.preventDefault();
    e.stopImmediatePropagation();

    
    
    // ✅ PREVENIR MÚLTIPLES ENVÍOS
    if (formularioSubmitido) {
      return;
    }
    
    MensajeManager.ocultar();
    
    // ✅ VALIDAR TODOS LOS CAMPOS - CORREGIDO TIPOS
    let todoValido = true;
    let primerError: Element | null = null;
    
    // Convertir NodeList a Array y tipar correctamente
    const camposArray = Array.from(camposRequeridos) as (HTMLInputElement | HTMLSelectElement)[];
    
    for (const campo of camposArray) {
      if (!ValidadorCampos.validarCampo(campo)) {
        todoValido = false;
        if (!primerError) {
          primerError = campo;
        }
      }
    }
    
    if (!todoValido && primerError) {
      MensajeManager.mostrar('error', 'Por favor corrige los errores señalados');
      
      // Type guard para asegurar que es un elemento enfocable
      if (primerError instanceof HTMLInputElement || primerError instanceof HTMLSelectElement) {
        primerError.focus();
        primerError.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
      return;
    }
    
    // ✅ CONFIGURAR BOTÓN DE ENVÍO
    if (!elementos.submitButton) {
      console.error('❌ Botón de envío no encontrado');
      return;
    }
    
    const textoOriginal = elementos.submitButton.textContent || '';
    
    // ✅ PREVENIR ENVÍOS MÚLTIPLES
    let enviandoFormulario = false;
    
    try {
      // Verificar si ya se está enviando
      if (enviandoFormulario) {
        return;
      }
      
      enviandoFormulario = true;
      elementos.submitButton.textContent = 'Enviando...';
      elementos.submitButton.disabled = true;
      MensajeManager.mostrar('loading', 'Procesando tu solicitud...');
      
      // ✅ RECOPILAR DATOS (SIN DUPLICACIÓN)
      const datos: DatosFormulario = {
        nombre: elementos.campos.nombre.value.trim(),
        email: elementos.campos.email.value.trim(),
        telefono: elementos.campos.telefono.value.trim(),
        duracion: elementos.campos.duracion.value,
        fecha: elementos.campos.fecha.value,
        personas: elementos.campos.personas.value,
        como_conociste: elementos.campos.como_conociste.value,
        mensaje: elementos.campos.mensaje.value.trim()
      };
      
      
      // ✅ ENVIAR EMAIL (CON ANTI-SPAM)
      await EnviadorFormulario.enviarEmail(datos);
      
      // ✅ MARCAR COMO ENVIADO
      formularioSubmitido = true;
      
      // ✅ MOSTRAR ÉXITO PRIMERO
      MensajeManager.mostrar('success', '¡Email enviado exitosamente! ¿Quieres continuar por WhatsApp?');
      
      // ✅ WHATSAPP CONTROLADO - CON CONFIRMACIÓN
      const mensajeWhatsApp = EnviadorFormulario.crearMensajeWhatsApp(datos);
      EnviadorFormulario.abrirWhatsAppControlado(mensajeWhatsApp, false);
      
      // ✅ REDIRIGIR DESPUÉS DE DELAY
      setTimeout(() => {
        window.location.href = '/gracias';
      }, CONFIG.REDIRECT_DELAY);
      
    } catch (error) {
      console.error('❌ Error en envío:', error);
      MensajeManager.mostrar('error', 'Error al enviar email. ¿Quieres intentar por WhatsApp?');
      
      // ✅ SOLO EN EMERGENCIA - WHATSAPP AUTOMÁTICO
      const emergencyMsg = `🚨 Solicitud Pixel Living - Error en formulario web

- Nombre: ${elementos.campos.nombre.value || 'N/A'}
- Email: ${elementos.campos.email.value || 'N/A'}
- Teléfono: ${elementos.campos.telefono.value || 'N/A'}

Por favor contactar urgente.`;
      
      EnviadorFormulario.abrirWhatsAppControlado(emergencyMsg, true);
      
    } finally {
      enviandoFormulario = false;
      elementos.submitButton.textContent = textoOriginal;
      elementos.submitButton.disabled = false;
    }
  });
  
  
});
</script>